$ cd /workspace/shadcn-ui && pnpm run lint

> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src

$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 2102 modules transformed.
rendering chunks...
computing gzip size...
dist/index.html                            0.89 kB │ gzip:   0.44 kB
dist/assets/index-Ok7V1z1P.css            61.74 kB │ gzip:  10.91 kB
dist/assets/purify.es-CQJ0hv7W.js         21.82 kB │ gzip:   8.58 kB
dist/assets/index.es-BnaJSHBT.js         150.42 kB │ gzip:  51.39 kB
dist/assets/html2canvas.esm-CBrSDip1.js  201.42 kB │ gzip:  48.03 kB
dist/assets/index-DxamhinB.js            856.84 kB │ gzip: 275.32 kB

(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
✓ built in 8.28s
$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  361:4  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 7 modules transformed.
x Build failed in 1.13s
error during build:
[vite:esbuild] Transform failed with 1 error:
/workspace/shadcn-ui/src/pages/Index.tsx:361:5: ERROR: Expected identifier but found "/"
file: /workspace/shadcn-ui/src/pages/Index.tsx:361:5

Expected identifier but found "/"
359|        textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'
360|      };
361|    };</to_replace>
   |       ^
362|  </Editor.edit_file_by_replace>
363|  

    at failureErrorWithLog (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15)
    at /workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:755:50
    at responseCallbacks.<computed> (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9)
    at handleIncomingPacket (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12)
    at Socket.readFromStdout (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7)
    at Socket.emit (node:events:518:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)
 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  361:4  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 15 modules transformed.
x Build failed in 1.27s
error during build:
[vite:esbuild] Transform failed with 1 error:
/workspace/shadcn-ui/src/pages/Index.tsx:361:5: ERROR: Expected identifier but found "/"
file: /workspace/shadcn-ui/src/pages/Index.tsx:361:5

Expected identifier but found "/"
359|        textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'
360|      };
361|    };</to_replace>
   |       ^
362|  </Editor.edit_file_by_replace>
363|  

    at failureErrorWithLog (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15)
    at /workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:755:50
    at responseCallbacks.<computed> (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9)
    at handleIncomingPacket (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12)
    at Socket.readFromStdout (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7)
    at Socket.emit (node:events:518:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)
 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  361:4  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 8 modules transformed.
x Build failed in 1.06s
error during build:
[vite:esbuild] Transform failed with 1 error:
/workspace/shadcn-ui/src/pages/Index.tsx:361:5: ERROR: Expected identifier but found "/"
file: /workspace/shadcn-ui/src/pages/Index.tsx:361:5

Expected identifier but found "/"
359|        textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'
360|      };
361|    };</to_replace>
   |       ^
362|  </Editor.edit_file_by_replace>
363|  

    at failureErrorWithLog (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15)
    at /workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:755:50
    at responseCallbacks.<computed> (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9)
    at handleIncomingPacket (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12)
    at Socket.readFromStdout (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7)
    at Socket.emit (node:events:518:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)
 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  361:4  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 13 modules transformed.
x Build failed in 1.22s
error during build:
[vite:esbuild] Transform failed with 1 error:
/workspace/shadcn-ui/src/pages/Index.tsx:361:5: ERROR: Expected identifier but found "/"
file: /workspace/shadcn-ui/src/pages/Index.tsx:361:5

Expected identifier but found "/"
359|        textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'
360|      };
361|    };</to_replace>
   |       ^
362|  </Editor.edit_file_by_replace>
363|  

    at failureErrorWithLog (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15)
    at /workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:755:50
    at responseCallbacks.<computed> (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9)
    at handleIncomingPacket (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12)
    at Socket.readFromStdout (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7)
    at Socket.emit (node:events:518:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)
 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  361:4  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 7 modules transformed.
x Build failed in 1.07s
error during build:
[vite:esbuild] Transform failed with 1 error:
/workspace/shadcn-ui/src/pages/Index.tsx:361:5: ERROR: Expected identifier but found "/"
file: /workspace/shadcn-ui/src/pages/Index.tsx:361:5

Expected identifier but found "/"
359|        textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'
360|      };
361|    };</to_replace>
   |       ^
362|  </Editor.edit_file_by_replace>
363|  

    at failureErrorWithLog (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15)
    at /workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:755:50
    at responseCallbacks.<computed> (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9)
    at handleIncomingPacket (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12)
    at Socket.readFromStdout (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7)
    at Socket.emit (node:events:518:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)
 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 7 modules transformed.
x Build failed in 1.38s
error during build:
[vite:esbuild] Transform failed with 1 error:
/workspace/shadcn-ui/src/pages/Index.tsx:361:5: ERROR: Expected identifier but found "/"
file: /workspace/shadcn-ui/src/pages/Index.tsx:361:5

Expected identifier but found "/"
359|        textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'
360|      };
361|    };</to_replace>
   |       ^
362|  </Editor.edit_file_by_replace>
363|  

    at failureErrorWithLog (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15)
    at /workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:755:50
    at responseCallbacks.<computed> (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9)
    at handleIncomingPacket (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12)
    at Socket.readFromStdout (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7)
    at Socket.emit (node:events:518:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)
 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && rm src/pages/Index.tsx

$ cd /workspace/shadcn-ui && cat > src/pages/Index.tsx << 'EOF'
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Textarea } from '@/components/ui/textarea';
import { Upload, Download, FileText, Image as ImageIcon, Settings } from 'lucide-react';
import { toast } from 'sonner';
import JSZip from 'jszip';
import jsPDF from 'jspdf';

const HEBREW_FONTS = [
  { value: 'David', label: 'דוד (David)' },
  { value: 'Narkisim', label: 'נרקיסים (Narkisim)' },
  { value: 'Rod', label: 'רוד (Rod)' },
  { value: 'Miriam', label: 'מרים (Miriam)' },
  { value: 'Gisha', label: 'גישה (Gisha)' },
  { value: 'Tahoma', label: 'Tahoma' },
];

const ENGLISH_FONTS = [
  { value: 'Arial', label: 'Arial' },
  { value: 'Times New Roman', label: 'Times New Roman' },
  { value: 'Calibri', label: 'Calibri' },
  { value: 'Georgia', label: 'Georgia' },
  { value: 'Helvetica', label: 'Helvetica' },
];

const EXPORT_RESOLUTIONS = [
  { value: '180', label: '180 DPI (1488x2126px)', width: 1488, height: 2126 },
  { value: '300', label: '300 DPI (2480x3543px)', width: 2480, height: 3543 }
];

const EXPORT_FORMATS = [
  { value: 'png', label: 'PNG' },
  { value: 'jpg', label: 'JPG' },
  { value: 'pdf', label: 'PDF' }
];

export default function Index() {
  const [sampleImage, setSampleImage] = useState(null);
  const [targetImages, setTargetImages] = useState([]);
  const [textFile, setTextFile] = useState(null);
  const [textLines, setTextLines] = useState([]);
  const [imageUrl, setImageUrl] = useState('');
  const [imageDimensions, setImageDimensions] = useState({ width: 800, height: 600 });
  const [isProcessing, setIsProcessing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [resizeHandle, setResizeHandle] = useState(null);
  const [processedImages, setProcessedImages] = useState([]);
  const [exportResolution, setExportResolution] = useState('180');
  const [exportFormat, setExportFormat] = useState('png');
  const [isHorizontal, setIsHorizontal] = useState(false);

  const [textBox, setTextBox] = useState({
    x: 100,
    y: 100,
    width: 300,
    height: 100,
    text: 'שלום עולם Hello World',
    style: {
      fontSize: 36,
      color: '#000000',
      strokeColor: '#ffffff',
      strokeWidth: 2,
      align: 'center',
      fontFamily: 'Tahoma'
    }
  });

  const containerRef = useRef(null);
  const sampleInputRef = useRef(null);
  const targetInputRef = useRef(null);
  const textInputRef = useRef(null);

  const detectLanguage = useCallback((text) => {
    const hebrewRegex = /[\u0590-\u05FF]/;
    return hebrewRegex.test(text) ? 'rtl' : 'ltr';
  }, []);

  const getExportDimensions = useCallback(() => {
    const resolution = EXPORT_RESOLUTIONS.find(r => r.value === exportResolution);
    if (isHorizontal) {
      return { width: resolution.height, height: resolution.width };
    }
    return { width: resolution.width, height: resolution.height };
  }, [exportResolution, isHorizontal]);

  const getTextStyle = () => {
    const { fontSize, color, strokeColor, strokeWidth, fontFamily, align } = textBox.style;
    const direction = detectLanguage(textBox.text);
    
    const containerRect = containerRef.current?.getBoundingClientRect();
    const previewScale = containerRect ? containerRect.width / imageDimensions.width : 1;
    const previewFontSize = fontSize * previewScale;
    
    return {
      fontSize: `${previewFontSize}px`,
      color,
      fontFamily: `"${fontFamily}", "Arial", sans-serif`,
      textAlign: align,
      direction,
      lineHeight: '1.2',
      wordWrap: 'break-word',
      overflow: 'hidden',
      cursor: isDragging ? 'grabbing' : 'grab',
      userSelect: 'none',
      whiteSpace: 'pre-wrap',
      WebkitTextStroke: strokeWidth > 0 ? `${strokeWidth * previewScale}px ${strokeColor}` : 'none',
      textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'
    };
  };

  const resetAll = useCallback(() => {
    setSampleImage(null);
    setTargetImages([]);
    setTextFile(null);
    setTextLines([]);
    setImageUrl('');
    setImageDimensions({ width: 800, height: 600 });
    setProcessedImages([]);
    setIsHorizontal(false);
    setIsDragging(false);
    setIsResizing(false);
    setDragStart({ x: 0, y: 0 });
    setResizeHandle(null);
    
    setTextBox({
      x: 100,
      y: 100,
      width: 300,
      height: 100,
      text: 'שלום עולם Hello World',
      style: {
        fontSize: 36,
        color: '#000000',
        strokeColor: '#ffffff',
        strokeWidth: 2,
        align: 'center',
        fontFamily: 'Tahoma'
      }
    });
    
    if (sampleInputRef.current) sampleInputRef.current.value = '';
    if (targetInputRef.current) targetInputRef.current.value = '';
    if (textInputRef.current) textInputRef.current.value = '';
    
    toast.success('All data cleared successfully');
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 p-2 sm:p-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-4 sm:mb-8">
          <div className="flex justify-between items-start mb-4">
            <div className="flex-1">
              <h1 className="text-2xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-2 sm:mb-4">
                Bulk Text Overlay Processing Tool
              </h1>
              <p className="text-sm sm:text-lg text-gray-600">
                Add variable text to multiple images with batch processing and professional export
              </p>
            </div>
            <Button 
              onClick={resetAll} 
              variant="outline" 
              size="sm"
              className="ml-4 text-red-600 border-red-300 hover:bg-red-50 hover:border-red-400"
            >
              🔄 Reset All
            </Button>
          </div>
        </div>

        <Tabs defaultValue="design" className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-4">
            <TabsTrigger value="design" className="text-xs sm:text-sm">Design</TabsTrigger>
            <TabsTrigger value="batch" className="text-xs sm:text-sm">Batch Setup</TabsTrigger>
            <TabsTrigger value="process" className="text-xs sm:text-sm">Process & Export</TabsTrigger>
          </TabsList>

          <TabsContent value="design" className="space-y-4 sm:space-y-6">
            <div className="grid lg:grid-cols-2 gap-4 sm:gap-6">
              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Sample Image & Text Design</CardTitle>
                  <CardDescription className="text-sm">
                    Upload a sample image and design your text overlay.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 sm:p-6 text-center">
                      <input
                        ref={sampleInputRef}
                        type="file"
                        accept="image/*"
                        className="hidden"
                      />
                      <Button onClick={() => sampleInputRef.current?.click()} variant="outline" className="w-full text-xs sm:text-sm">
                        <Upload className="h-3 w-3 sm:h-4 sm:w-4 mr-2" />
                        Upload Sample Image
                      </Button>
                      {sampleImage && <p className="mt-2 text-xs sm:text-sm text-green-600">✓ {sampleImage.name}</p>}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Text Styling</CardTitle>
                  <CardDescription className="text-sm">Design your text appearance.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4 sm:space-y-6">
                  <div className="space-y-2">
                    <Label className="text-sm">Sample Text Content</Label>
                    <Textarea
                      value={textBox.text}
                      onChange={(e) => setTextBox(prev => ({ ...prev, text: e.target.value }))}
                      placeholder="Enter sample text... הכנס טקסט לדוגמה"
                      className="min-h-[60px] sm:min-h-[80px] resize-none text-sm"
                      dir="auto"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="batch" className="space-y-4">
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Target Images</CardTitle>
                  <CardDescription>Upload multiple images for processing</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={targetInputRef}
                      type="file"
                      accept="image/*"
                      multiple
                      className="hidden"
                    />
                    <Button onClick={() => targetInputRef.current?.click()} variant="outline" className="w-full">
                      <Upload className="h-4 w-4 mr-2" />
                      Upload Target Images
                    </Button>
                    {targetImages.length > 0 && (
                      <p className="mt-2 text-sm text-green-600">✓ {targetImages.length} images uploaded</p>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Text File</CardTitle>
                  <CardDescription>Upload text file with one line per image</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={textInputRef}
                      type="file"
                      accept=".txt"
                      className="hidden"
                    />
                    <Button onClick={() => textInputRef.current?.click()} variant="outline" className="w-full">
                      <FileText className="h-4 w-4 mr-2" />
                      Upload Text File
                    </Button>
                    {textFile && (
                      <p className="mt-2 text-sm text-green-600">✓ {textFile.name} ({textLines.length} lines)</p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Processing</CardTitle>
                <CardDescription>Process images and download results</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button 
                  disabled={isProcessing}
                  className="w-full"
                  size="lg"
                >
                  {isProcessing ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Processing...
                    </>
                  ) : (
                    <>
                      <Settings className="h-4 w-4 mr-2" />
                      Process All Images
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 1670 modules transformed.
rendering chunks...
computing gzip size...
dist/index.html                   0.89 kB │ gzip:  0.44 kB
dist/assets/index-1MX-Tc7a.css   60.18 kB │ gzip: 10.66 kB
dist/assets/index-BinLbzJ5.js   306.84 kB │ gzip: 98.58 kB
✓ built in 4.68s
$ cd /workspace/shadcn-ui && cat >> src/pages/Index.tsx << 'EOF'
                      ) : (
                        <div className="w-full h-full flex flex-col items-center justify-center text-gray-400 space-y-2 sm:space-y-4 p-4">
                          <ImageIcon className="h-12 w-12 sm:h-16 sm:w-16" />
                          <div className="text-center">
                            <p className="text-sm sm:text-lg font-medium">Upload a sample image to start designing</p>
                            <p className="text-xs sm:text-sm">This will be used to position text for all target images</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Text Styling</CardTitle>
                  <CardDescription className="text-sm">Design your text appearance. These settings will be applied to all target images.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4 sm:space-y-6">
                  <div className="space-y-2">
                    <Label className="text-sm">Sample Text Content</Label>
                    <Textarea
                      value={textBox.text}
                      onChange={(e) => handleTextChange(e.target.value)}
                      placeholder="Enter sample text... הכנס טקסט לדוגמה"
                      className="min-h-[60px] sm:min-h-[80px] resize-none text-sm"
                      dir="auto"
                    />
                    <div className="text-xs text-gray-500">This is just for design preview. Actual text will come from your text file.</div>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Font Family</Label>
                    <Select value={textBox.style.fontFamily} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontFamily: value } }))}>
                      <SelectTrigger><SelectValue /></SelectTrigger>
                      <SelectContent>
                        <div className="px-2 py-1 text-sm font-medium text-gray-500">Hebrew Fonts</div>
                        {HEBREW_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>{font.label}</SelectItem>
                        ))}
                        <div className="px-2 py-1 text-sm font-medium text-gray-500 border-t mt-2 pt-2">English Fonts</div>
                        {ENGLISH_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>{font.label}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label className="text-sm">Font Size: {textBox.style.fontSize}px</Label>
                      <Slider
                        value={[textBox.style.fontSize]}
                        onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontSize: value } }))}
                        min={12}
                        max={120}
                        step={1}
                        className="w-full"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label className="text-sm">Text Alignment</Label>
                      <Select value={textBox.style.align} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, align: value } }))}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>
                          <SelectItem value="left">Left</SelectItem>
                          <SelectItem value="center">Center</SelectItem>
                          <SelectItem value="right">Right</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label className="text-sm">Text Color</Label>
                      <div className="flex gap-2">
                        <Input
                          type="color"
                          value={textBox.style.color}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, color: e.target.value } }))}
                          className="w-12 h-8 p-1 border rounded"
                        />
                        <Input
                          type="text"
                          value={textBox.style.color}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, color: e.target.value } }))}
                          className="flex-1 text-xs"
                          placeholder="#000000"
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label className="text-sm">Stroke Color</Label>
                      <div className="flex gap-2">
                        <Input
                          type="color"
                          value={textBox.style.strokeColor}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeColor: e.target.value } }))}
                          className="w-12 h-8 p-1 border rounded"
                        />
                        <Input
                          type="text"
                          value={textBox.style.strokeColor}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeColor: e.target.value } }))}
                          className="flex-1 text-xs"
                          placeholder="#ffffff"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Stroke Width: {textBox.style.strokeWidth}px</Label>
                    <Slider
                      value={[textBox.style.strokeWidth]}
                      onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeWidth: value } }))}
                      min={0}
                      max={10}
                      step={0.5}
                      className="w-full"
                    />
                    <div className="text-xs text-gray-500">Stroke appears as outline around text (outside effect)</div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="batch" className="space-y-4">
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Target Images</CardTitle>
                  <CardDescription>Upload multiple images for processing</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={targetInputRef}
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={handleTargetUpload}
                      className="hidden"
                    />
                    <Button onClick={() => targetInputRef.current?.click()} variant="outline" className="w-full">
                      <Upload className="h-4 w-4 mr-2" />
                      Upload Target Images
                    </Button>
                    {targetImages.length > 0 && (
                      <p className="mt-2 text-sm text-green-600">✓ {targetImages.length} images uploaded</p>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Text File</CardTitle>
                  <CardDescription>Upload text file with one line per image</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={textInputRef}
                      type="file"
                      accept=".txt"
                      onChange={handleTextFileUpload}
                      className="hidden"
                    />
                    <Button onClick={() => textInputRef.current?.click()} variant="outline" className="w-full">
                      <FileText className="h-4 w-4 mr-2" />
                      Upload Text File
                    </Button>
                    {textFile && (
                      <p className="mt-2 text-sm text-green-600">✓ {textFile.name} ({textLines.length} lines)</p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-4">
            <div className="grid lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Export Settings</CardTitle>
                  <CardDescription>Configure output format and quality</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Export Resolution</Label>
                    <Select value={exportResolution} onValueChange={setExportResolution}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {EXPORT_RESOLUTIONS.map((resolution) => (
                          <SelectItem key={resolution.value} value={resolution.value}>
                            {resolution.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Export Format</Label>
                    <Select value={exportFormat} onValueChange={setExportFormat}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {EXPORT_FORMATS.map((format) => (
                          <SelectItem key={format.value} value={format.value}>
                            {format.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Processing</CardTitle>
                  <CardDescription>Process images and download results</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Button 
                    onClick={handleBulkProcess} 
                    disabled={isProcessing || targetImages.length === 0 || textLines.length === 0}
                    className="w-full"
                    size="lg"
                  >
                    {isProcessing ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Processing...
                      </>
                    ) : (
                      <>
                        <Settings className="h-4 w-4 mr-2" />
                        Process All Images
                      </>
                    )}
                  </Button>

                  {processedImages.length > 0 && (
                    <div className="space-y-3">
                      <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                        <p className="text-sm font-medium text-green-800">✅ Processing Complete!</p>
                        <p className="text-xs text-green-700">{processedImages.length} images processed</p>
                      </div>

                      <Button 
                        onClick={downloadAsZip} 
                        className="w-full"
                        variant="outline"
                        size="lg"
                      >
                        <Download className="h-4 w-4 mr-2" />
                        Download {exportFormat === 'pdf' ? 'PDF' : 'ZIP File'}
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm add jszip jspdf

Progress: resolved 0, reused 1, downloaded 0, added 0
Progress: resolved 105, reused 105, downloaded 0, added 0
Progress: resolved 517, reused 444, downloaded 0, added 0
 WARN  1 deprecated subdependencies found: rollup-plugin-terser@7.0.2
Already up to date
Progress: resolved 523, reused 449, downloaded 0, added 0, done

Done in 4.5s
$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 6 modules transformed.
x Build failed in 992ms
error during build:
[vite:esbuild] Transform failed with 1 error:
/workspace/shadcn-ui/src/pages/Index.tsx:1:22: ERROR: Unexpected ")"
file: /workspace/shadcn-ui/src/pages/Index.tsx:1:22

Unexpected ")"
1  |                        ) : (
   |                        ^
2  |                          <div className="w-full h-full flex flex-col items-center justify-center text-gray-400 space-y-2 sm:space-y-4 p-4">
3  |                            <ImageIcon className="h-12 w-12 sm:h-16 sm:w-16" />

    at failureErrorWithLog (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15)
    at /workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:755:50
    at responseCallbacks.<computed> (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9)
    at handleIncomingPacket (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12)
    at Socket.readFromStdout (/workspace/shadcn-ui/node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7)
    at Socket.emit (node:events:518:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)
 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && rm -f src/pages/Index.tsx

$ cd /workspace/shadcn-ui && cat > src/pages/Index.tsx << 'EOF'
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Textarea } from '@/components/ui/textarea';
import { Upload, Download, FileText, Image as ImageIcon, Settings } from 'lucide-react';
import { toast } from 'sonner';
import JSZip from 'jszip';
import jsPDF from 'jspdf';

const HEBREW_FONTS = [
  { value: 'David', label: 'דוד (David)' },
  { value: 'Narkisim', label: 'נרקיסים (Narkisim)' },
  { value: 'Rod', label: 'רוד (Rod)' },
  { value: 'Miriam', label: 'מרים (Miriam)' },
  { value: 'Gisha', label: 'גישה (Gisha)' },
  { value: 'Tahoma', label: 'Tahoma' },
];

const ENGLISH_FONTS = [
  { value: 'Arial', label: 'Arial' },
  { value: 'Times New Roman', label: 'Times New Roman' },
  { value: 'Calibri', label: 'Calibri' },
  { value: 'Georgia', label: 'Georgia' },
  { value: 'Helvetica', label: 'Helvetica' },
];

const EXPORT_RESOLUTIONS = [
  { value: '180', label: '180 DPI (1488x2126px)', width: 1488, height: 2126 },
  { value: '300', label: '300 DPI (2480x3543px)', width: 2480, height: 3543 }
];

const EXPORT_FORMATS = [
  { value: 'png', label: 'PNG' },
  { value: 'jpg', label: 'JPG' },
  { value: 'pdf', label: 'PDF' }
];

export default function Index() {
  const [sampleImage, setSampleImage] = useState(null);
  const [targetImages, setTargetImages] = useState([]);
  const [textFile, setTextFile] = useState(null);
  const [textLines, setTextLines] = useState([]);
  const [imageUrl, setImageUrl] = useState('');
  const [imageDimensions, setImageDimensions] = useState({ width: 800, height: 600 });
  const [isProcessing, setIsProcessing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [resizeHandle, setResizeHandle] = useState(null);
  const [processedImages, setProcessedImages] = useState([]);
  const [exportResolution, setExportResolution] = useState('180');
  const [exportFormat, setExportFormat] = useState('png');
  const [isHorizontal, setIsHorizontal] = useState(false);

  const [textBox, setTextBox] = useState({
    x: 100,
    y: 100,
    width: 300,
    height: 100,
    text: 'שלום עולם Hello World',
    style: {
      fontSize: 36,
      color: '#000000',
      strokeColor: '#ffffff',
      strokeWidth: 2,
      align: 'center',
      fontFamily: 'Tahoma'
    }
  });

  const containerRef = useRef(null);
  const sampleInputRef = useRef(null);
  const targetInputRef = useRef(null);
  const textInputRef = useRef(null);

  const detectLanguage = useCallback((text) => {
    const hebrewRegex = /[\u0590-\u05FF]/;
    return hebrewRegex.test(text) ? 'rtl' : 'ltr';
  }, []);

  const getExportDimensions = useCallback(() => {
    const resolution = EXPORT_RESOLUTIONS.find(r => r.value === exportResolution);
    if (isHorizontal) {
      return { width: resolution.height, height: resolution.width };
    }
    return { width: resolution.width, height: resolution.height };
  }, [exportResolution, isHorizontal]);

  const handleSampleUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      setSampleImage(file);
      const url = URL.createObjectURL(file);
      setImageUrl(url);
      
      const img = new Image();
      img.onload = () => {
        const horizontal = img.width > img.height;
        setIsHorizontal(horizontal);
        setImageDimensions({ width: img.width, height: img.height });
        setTextBox(prev => ({
          ...prev,
          x: Math.max(20, (img.width - prev.width) / 2),
          y: Math.max(20, (img.height - prev.height) / 2)
        }));
      };
      img.src = url;
      
      toast.success('Sample image uploaded successfully');
    } else {
      toast.error('Please select a valid image file');
    }
  }, []);

  const handleTargetUpload = useCallback((e) => {
    const files = Array.from(e.target.files || []);
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    if (imageFiles.length > 0) {
      setTargetImages(imageFiles);
      toast.success(`${imageFiles.length} target images uploaded`);
    } else {
      toast.error('Please select valid image files');
    }
  }, []);

  const handleTextFileUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (file && file.type === 'text/plain') {
      setTextFile(file);
      file.text().then(content => {
        const lines = content.split('\n').filter(line => line.trim() !== '');
        setTextLines(lines);
        toast.success(`Text file uploaded with ${lines.length} lines`);
      });
    } else {
      toast.error('Please select a valid text file');
    }
  }, []);

  const resetAll = useCallback(() => {
    setSampleImage(null);
    setTargetImages([]);
    setTextFile(null);
    setTextLines([]);
    setImageUrl('');
    setImageDimensions({ width: 800, height: 600 });
    setProcessedImages([]);
    setIsHorizontal(false);
    setIsDragging(false);
    setIsResizing(false);
    setDragStart({ x: 0, y: 0 });
    setResizeHandle(null);
    
    setTextBox({
      x: 100,
      y: 100,
      width: 300,
      height: 100,
      text: 'שלום עולם Hello World',
      style: {
        fontSize: 36,
        color: '#000000',
        strokeColor: '#ffffff',
        strokeWidth: 2,
        align: 'center',
        fontFamily: 'Tahoma'
      }
    });
    
    if (sampleInputRef.current) sampleInputRef.current.value = '';
    if (targetInputRef.current) targetInputRef.current.value = '';
    if (textInputRef.current) textInputRef.current.value = '';
    
    toast.success('All data cleared successfully');
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 p-2 sm:p-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-4 sm:mb-8">
          <div className="flex justify-between items-start mb-4">
            <div className="flex-1">
              <h1 className="text-2xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-2 sm:mb-4">
                Bulk Text Overlay Processing Tool
              </h1>
              <p className="text-sm sm:text-lg text-gray-600">
                Add variable text to multiple images with batch processing and professional export
              </p>
            </div>
            <Button 
              onClick={resetAll} 
              variant="outline" 
              size="sm"
              className="ml-4 text-red-600 border-red-300 hover:bg-red-50 hover:border-red-400"
            >
              🔄 Reset All
            </Button>
          </div>
        </div>

        <Tabs defaultValue="design" className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-4">
            <TabsTrigger value="design" className="text-xs sm:text-sm">Design</TabsTrigger>
            <TabsTrigger value="batch" className="text-xs sm:text-sm">Batch Setup</TabsTrigger>
            <TabsTrigger value="process" className="text-xs sm:text-sm">Process & Export</TabsTrigger>
          </TabsList>

          <TabsContent value="design" className="space-y-4 sm:space-y-6">
            <div className="grid lg:grid-cols-2 gap-4 sm:gap-6">
              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Sample Image & Text Design</CardTitle>
                  <CardDescription className="text-sm">
                    Upload a sample image and design your text overlay.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 sm:p-6 text-center">
                      <input
                        ref={sampleInputRef}
                        type="file"
                        accept="image/*"
                        onChange={handleSampleUpload}
                        className="hidden"
                      />
                      <Button onClick={() => sampleInputRef.current?.click()} variant="outline" className="w-full text-xs sm:text-sm">
                        <Upload className="h-3 w-3 sm:h-4 sm:w-4 mr-2" />
                        Upload Sample Image
                      </Button>
                      {sampleImage && <p className="mt-2 text-xs sm:text-sm text-green-600">✓ {sampleImage.name}</p>}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Text Styling</CardTitle>
                  <CardDescription className="text-sm">Design your text appearance.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4 sm:space-y-6">
                  <div className="space-y-2">
                    <Label className="text-sm">Sample Text Content</Label>
                    <Textarea
                      value={textBox.text}
                      onChange={(e) => setTextBox(prev => ({ ...prev, text: e.target.value }))}
                      placeholder="Enter sample text... הכנס טקסט לדוגמה"
                      className="min-h-[60px] sm:min-h-[80px] resize-none text-sm"
                      dir="auto"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="batch" className="space-y-4">
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Target Images</CardTitle>
                  <CardDescription>Upload multiple images for processing</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={targetInputRef}
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={handleTargetUpload}
                      className="hidden"
                    />
                    <Button onClick={() => targetInputRef.current?.click()} variant="outline" className="w-full">
                      <Upload className="h-4 w-4 mr-2" />
                      Upload Target Images
                    </Button>
                    {targetImages.length > 0 && (
                      <p className="mt-2 text-sm text-green-600">✓ {targetImages.length} images uploaded</p>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Text File</CardTitle>
                  <CardDescription>Upload text file with one line per image</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={textInputRef}
                      type="file"
                      accept=".txt"
                      onChange={handleTextFileUpload}
                      className="hidden"
                    />
                    <Button onClick={() => textInputRef.current?.click()} variant="outline" className="w-full">
                      <FileText className="h-4 w-4 mr-2" />
                      Upload Text File
                    </Button>
                    {textFile && (
                      <p className="mt-2 text-sm text-green-600">✓ {textFile.name} ({textLines.length} lines)</p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Processing</CardTitle>
                <CardDescription>Process images and download results</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button 
                  disabled={isProcessing}
                  className="w-full"
                  size="lg"
                >
                  {isProcessing ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Processing...
                    </>
                  ) : (
                    <>
                      <Settings className="h-4 w-4 mr-2" />
                      Process All Images
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 1670 modules transformed.
rendering chunks...
computing gzip size...
dist/index.html                   0.89 kB │ gzip:  0.44 kB
dist/assets/index-1MX-Tc7a.css   60.18 kB │ gzip: 10.66 kB
dist/assets/index-bX4PYXlm.js   307.83 kB │ gzip: 98.93 kB
✓ built in 4.44s
$ cd /workspace/shadcn-ui && rm -f src/pages/Index.tsx

$ cd /workspace/shadcn-ui && cat > src/pages/Index.tsx << 'EOF'
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Textarea } from '@/components/ui/textarea';
import { Upload, Download, FileText, Image as ImageIcon, Settings } from 'lucide-react';
import { toast } from 'sonner';
import JSZip from 'jszip';
import jsPDF from 'jspdf';

const HEBREW_FONTS = [
  { value: 'David', label: 'דוד (David)' },
  { value: 'Narkisim', label: 'נרקיסים (Narkisim)' },
  { value: 'Rod', label: 'רוד (Rod)' },
  { value: 'Miriam', label: 'מרים (Miriam)' },
  { value: 'Gisha', label: 'גישה (Gisha)' },
  { value: 'Tahoma', label: 'Tahoma' },
];

const ENGLISH_FONTS = [
  { value: 'Arial', label: 'Arial' },
  { value: 'Times New Roman', label: 'Times New Roman' },
  { value: 'Calibri', label: 'Calibri' },
  { value: 'Georgia', label: 'Georgia' },
  { value: 'Helvetica', label: 'Helvetica' },
];

const EXPORT_RESOLUTIONS = [
  { value: '180', label: '180 DPI (1488x2126px)', width: 1488, height: 2126 },
  { value: '300', label: '300 DPI (2480x3543px)', width: 2480, height: 3543 }
];

const EXPORT_FORMATS = [
  { value: 'png', label: 'PNG' },
  { value: 'jpg', label: 'JPG' },
  { value: 'pdf', label: 'PDF' }
];

export default function Index() {
  const [sampleImage, setSampleImage] = useState(null);
  const [targetImages, setTargetImages] = useState([]);
  const [textFile, setTextFile] = useState(null);
  const [textLines, setTextLines] = useState([]);
  const [imageUrl, setImageUrl] = useState('');
  const [imageDimensions, setImageDimensions] = useState({ width: 800, height: 600 });
  const [isProcessing, setIsProcessing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [resizeHandle, setResizeHandle] = useState(null);
  const [processedImages, setProcessedImages] = useState([]);
  const [exportResolution, setExportResolution] = useState('180');
  const [exportFormat, setExportFormat] = useState('png');
  const [isHorizontal, setIsHorizontal] = useState(false);

  const [textBox, setTextBox] = useState({
    x: 100,
    y: 100,
    width: 300,
    height: 100,
    text: 'שלום עולם Hello World',
    style: {
      fontSize: 36,
      color: '#000000',
      strokeColor: '#ffffff',
      strokeWidth: 2,
      align: 'center',
      fontFamily: 'Tahoma'
    }
  });

  const containerRef = useRef(null);
  const sampleInputRef = useRef(null);
  const targetInputRef = useRef(null);
  const textInputRef = useRef(null);

  const detectLanguage = useCallback((text) => {
    const hebrewRegex = /[\u0590-\u05FF]/;
    return hebrewRegex.test(text) ? 'rtl' : 'ltr';
  }, []);

  const getExportDimensions = useCallback(() => {
    const resolution = EXPORT_RESOLUTIONS.find(r => r.value === exportResolution);
    if (isHorizontal) {
      return { width: resolution.height, height: resolution.width };
    }
    return { width: resolution.width, height: resolution.height };
  }, [exportResolution, isHorizontal]);

  const handleSampleUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      setSampleImage(file);
      const url = URL.createObjectURL(file);
      setImageUrl(url);
      
      const img = new Image();
      img.onload = () => {
        const horizontal = img.width > img.height;
        setIsHorizontal(horizontal);
        setImageDimensions({ width: img.width, height: img.height });
        setTextBox(prev => ({
          ...prev,
          x: Math.max(20, (img.width - prev.width) / 2),
          y: Math.max(20, (img.height - prev.height) / 2)
        }));
      };
      img.src = url;
      
      toast.success('Sample image uploaded successfully');
    } else {
      toast.error('Please select a valid image file');
    }
  }, []);

  const handleTargetUpload = useCallback((e) => {
    const files = Array.from(e.target.files || []);
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    if (imageFiles.length > 0) {
      setTargetImages(imageFiles);
      toast.success(`${imageFiles.length} target images uploaded`);
    } else {
      toast.error('Please select valid image files');
    }
  }, []);

  const handleTextFileUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (file && file.type === 'text/plain') {
      setTextFile(file);
      file.text().then(content => {
        const lines = content.split('\n').filter(line => line.trim() !== '');
        setTextLines(lines);
        toast.success(`Text file uploaded with ${lines.length} lines`);
      });
    } else {
      toast.error('Please select a valid text file');
    }
  }, []);

  const resetAll = useCallback(() => {
    setSampleImage(null);
    setTargetImages([]);
    setTextFile(null);
    setTextLines([]);
    setImageUrl('');
    setImageDimensions({ width: 800, height: 600 });
    setProcessedImages([]);
    setIsHorizontal(false);
    setIsDragging(false);
    setIsResizing(false);
    setDragStart({ x: 0, y: 0 });
    setResizeHandle(null);
    
    setTextBox({
      x: 100,
      y: 100,
      width: 300,
      height: 100,
      text: 'שלום עולם Hello World',
      style: {
        fontSize: 36,
        color: '#000000',
        strokeColor: '#ffffff',
        strokeWidth: 2,
        align: 'center',
        fontFamily: 'Tahoma'
      }
    });
    
    if (sampleInputRef.current) sampleInputRef.current.value = '';
    if (targetInputRef.current) targetInputRef.current.value = '';
    if (textInputRef.current) textInputRef.current.value = '';
    
    toast.success('All data cleared successfully');
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 p-2 sm:p-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-4 sm:mb-8">
          <div className="flex justify-between items-start mb-4">
            <div className="flex-1">
              <h1 className="text-2xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-2 sm:mb-4">
                Bulk Text Overlay Processing Tool
              </h1>
              <p className="text-sm sm:text-lg text-gray-600">
                Add variable text to multiple images with batch processing and professional export
              </p>
            </div>
            <Button 
              onClick={resetAll} 
              variant="outline" 
              size="sm"
              className="ml-4 text-red-600 border-red-300 hover:bg-red-50 hover:border-red-400"
            >
              🔄 Reset All
            </Button>
          </div>
        </div>

        <Tabs defaultValue="design" className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-4">
            <TabsTrigger value="design" className="text-xs sm:text-sm">Design</TabsTrigger>
            <TabsTrigger value="batch" className="text-xs sm:text-sm">Batch Setup</TabsTrigger>
            <TabsTrigger value="process" className="text-xs sm:text-sm">Process & Export</TabsTrigger>
          </TabsList>

          <TabsContent value="design" className="space-y-4 sm:space-y-6">
            <div className="grid lg:grid-cols-2 gap-4 sm:gap-6">
              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Sample Image & Text Design</CardTitle>
                  <CardDescription className="text-sm">
                    Upload a sample image and design your text overlay.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 sm:p-6 text-center">
                      <input
                        ref={sampleInputRef}
                        type="file"
                        accept="image/*"
                        onChange={handleSampleUpload}
                        className="hidden"
                      />
                      <Button onClick={() => sampleInputRef.current?.click()} variant="outline" className="w-full text-xs sm:text-sm">
                        <Upload className="h-3 w-3 sm:h-4 sm:w-4 mr-2" />
                        Upload Sample Image
                      </Button>
                      {sampleImage && <p className="mt-2 text-xs sm:text-sm text-green-600">✓ {sampleImage.name}</p>}
                    </div>

                    <div className="relative border rounded-lg overflow-hidden bg-gray-100 select-none touch-none" style={{ aspectRatio: isHorizontal ? '4/3' : '3/4', minHeight: '300px' }}>
                      {imageUrl ? (
                        <img src={imageUrl} alt="Preview" className="w-full h-full object-contain pointer-events-none" draggable={false} />
                      ) : (
                        <div className="w-full h-full flex flex-col items-center justify-center text-gray-400 space-y-2 sm:space-y-4 p-4">
                          <ImageIcon className="h-12 w-12 sm:h-16 sm:w-16" />
                          <div className="text-center">
                            <p className="text-sm sm:text-lg font-medium">Upload a sample image to start designing</p>
                            <p className="text-xs sm:text-sm">This will be used to position text for all target images</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Text Styling</CardTitle>
                  <CardDescription className="text-sm">Design your text appearance.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4 sm:space-y-6">
                  <div className="space-y-2">
                    <Label className="text-sm">Sample Text Content</Label>
                    <Textarea
                      value={textBox.text}
                      onChange={(e) => setTextBox(prev => ({ ...prev, text: e.target.value }))}
                      placeholder="Enter sample text... הכנס טקסט לדוגמה"
                      className="min-h-[60px] sm:min-h-[80px] resize-none text-sm"
                      dir="auto"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Font Family</Label>
                    <Select value={textBox.style.fontFamily} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontFamily: value } }))}>
                      <SelectTrigger><SelectValue /></SelectTrigger>
                      <SelectContent>
                        <div className="px-2 py-1 text-sm font-medium text-gray-500">Hebrew Fonts</div>
                        {HEBREW_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>{font.label}</SelectItem>
                        ))}
                        <div className="px-2 py-1 text-sm font-medium text-gray-500 border-t mt-2 pt-2">English Fonts</div>
                        {ENGLISH_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>{font.label}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label className="text-sm">Font Size: {textBox.style.fontSize}px</Label>
                      <Slider
                        value={[textBox.style.fontSize]}
                        onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontSize: value } }))}
                        min={12}
                        max={120}
                        step={1}
                        className="w-full"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label className="text-sm">Text Alignment</Label>
                      <Select value={textBox.style.align} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, align: value } }))}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>
                          <SelectItem value="left">Left</SelectItem>
                          <SelectItem value="center">Center</SelectItem>
                          <SelectItem value="right">Right</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label className="text-sm">Text Color</Label>
                      <div className="flex gap-2">
                        <Input
                          type="color"
                          value={textBox.style.color}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, color: e.target.value } }))}
                          className="w-12 h-8 p-1 border rounded"
                        />
                        <Input
                          type="text"
                          value={textBox.style.color}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, color: e.target.value } }))}
                          className="flex-1 text-xs"
                          placeholder="#000000"
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label className="text-sm">Stroke Color</Label>
                      <div className="flex gap-2">
                        <Input
                          type="color"
                          value={textBox.style.strokeColor}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeColor: e.target.value } }))}
                          className="w-12 h-8 p-1 border rounded"
                        />
                        <Input
                          type="text"
                          value={textBox.style.strokeColor}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeColor: e.target.value } }))}
                          className="flex-1 text-xs"
                          placeholder="#ffffff"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Stroke Width: {textBox.style.strokeWidth}px</Label>
                    <Slider
                      value={[textBox.style.strokeWidth]}
                      onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeWidth: value } }))}
                      min={0}
                      max={10}
                      step={0.5}
                      className="w-full"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="batch" className="space-y-4">
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Target Images</CardTitle>
                  <CardDescription>Upload multiple images for processing</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={targetInputRef}
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={handleTargetUpload}
                      className="hidden"
                    />
                    <Button onClick={() => targetInputRef.current?.click()} variant="outline" className="w-full">
                      <Upload className="h-4 w-4 mr-2" />
                      Upload Target Images
                    </Button>
                    {targetImages.length > 0 && (
                      <p className="mt-2 text-sm text-green-600">✓ {targetImages.length} images uploaded</p>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Text File</CardTitle>
                  <CardDescription>Upload text file with one line per image</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={textInputRef}
                      type="file"
                      accept=".txt"
                      onChange={handleTextFileUpload}
                      className="hidden"
                    />
                    <Button onClick={() => textInputRef.current?.click()} variant="outline" className="w-full">
                      <FileText className="h-4 w-4 mr-2" />
                      Upload Text File
                    </Button>
                    {textFile && (
                      <p className="mt-2 text-sm text-green-600">✓ {textFile.name} ({textLines.length} lines)</p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-4">
            <div className="grid lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Export Settings</CardTitle>
                  <CardDescription>Configure output format and quality</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Export Resolution</Label>
                    <Select value={exportResolution} onValueChange={setExportResolution}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {EXPORT_RESOLUTIONS.map((resolution) => (
                          <SelectItem key={resolution.value} value={resolution.value}>
                            {resolution.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Export Format</Label>
                    <Select value={exportFormat} onValueChange={setExportFormat}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {EXPORT_FORMATS.map((format) => (
                          <SelectItem key={format.value} value={format.value}>
                            {format.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Processing</CardTitle>
                  <CardDescription>Process images and download results</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Button 
                    disabled={isProcessing || targetImages.length === 0 || textLines.length === 0}
                    className="w-full"
                    size="lg"
                  >
                    {isProcessing ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Processing...
                      </>
                    ) : (
                      <>
                        <Settings className="h-4 w-4 mr-2" />
                        Process All Images
                      </>
                    )}
                  </Button>

                  {processedImages.length > 0 && (
                    <div className="space-y-3">
                      <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                        <p className="text-sm font-medium text-green-800">✅ Processing Complete!</p>
                        <p className="text-xs text-green-700">{processedImages.length} images processed</p>
                      </div>

                      <Button 
                        className="w-full"
                        variant="outline"
                        size="lg"
                      >
                        <Download className="h-4 w-4 mr-2" />
                        Download {exportFormat === 'pdf' ? 'PDF' : 'ZIP File'}
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 1716 modules transformed.
rendering chunks...
computing gzip size...
dist/index.html                   0.89 kB │ gzip:   0.44 kB
dist/assets/index-ChrFlyp4.css   61.29 kB │ gzip:  10.84 kB
dist/assets/index-Cv_I9Wej.js   361.13 kB │ gzip: 115.33 kB
✓ built in 4.98s
$ cd /workspace/shadcn-ui && rm -f src/pages/Index.tsx

$ cd /workspace/shadcn-ui && cat > src/pages/Index.tsx << 'EOF'
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Textarea } from '@/components/ui/textarea';
import { Upload, Download, FileText, Image as ImageIcon, Settings } from 'lucide-react';
import { toast } from 'sonner';
import JSZip from 'jszip';
import jsPDF from 'jspdf';

const HEBREW_FONTS = [
  { value: 'David', label: 'דוד (David)' },
  { value: 'Narkisim', label: 'נרקיסים (Narkisim)' },
  { value: 'Rod', label: 'רוד (Rod)' },
  { value: 'Miriam', label: 'מרים (Miriam)' },
  { value: 'Gisha', label: 'גישה (Gisha)' },
  { value: 'Tahoma', label: 'Tahoma' },
];

const ENGLISH_FONTS = [
  { value: 'Arial', label: 'Arial' },
  { value: 'Times New Roman', label: 'Times New Roman' },
  { value: 'Calibri', label: 'Calibri' },
  { value: 'Georgia', label: 'Georgia' },
  { value: 'Helvetica', label: 'Helvetica' },
];

const EXPORT_RESOLUTIONS = [
  { value: '180', label: '180 DPI (1488x2126px)', width: 1488, height: 2126 },
  { value: '300', label: '300 DPI (2480x3543px)', width: 2480, height: 3543 }
];

const EXPORT_FORMATS = [
  { value: 'png', label: 'PNG' },
  { value: 'jpg', label: 'JPG' },
  { value: 'pdf', label: 'PDF' }
];

export default function Index() {
  const [sampleImage, setSampleImage] = useState(null);
  const [targetImages, setTargetImages] = useState([]);
  const [textFile, setTextFile] = useState(null);
  const [textLines, setTextLines] = useState([]);
  const [imageUrl, setImageUrl] = useState('');
  const [imageDimensions, setImageDimensions] = useState({ width: 800, height: 600 });
  const [isProcessing, setIsProcessing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [resizeHandle, setResizeHandle] = useState(null);
  const [processedImages, setProcessedImages] = useState([]);
  const [exportResolution, setExportResolution] = useState('180');
  const [exportFormat, setExportFormat] = useState('png');
  const [isHorizontal, setIsHorizontal] = useState(false);

  const [textBox, setTextBox] = useState({
    x: 100,
    y: 100,
    width: 300,
    height: 100,
    text: 'שלום עולם Hello World',
    style: {
      fontSize: 36,
      color: '#000000',
      strokeColor: '#ffffff',
      strokeWidth: 2,
      align: 'center',
      fontFamily: 'Tahoma'
    }
  });

  const containerRef = useRef(null);
  const sampleInputRef = useRef(null);
  const targetInputRef = useRef(null);
  const textInputRef = useRef(null);

  const detectLanguage = useCallback((text) => {
    const hebrewRegex = /[\u0590-\u05FF]/;
    return hebrewRegex.test(text) ? 'rtl' : 'ltr';
  }, []);

  const getExportDimensions = useCallback(() => {
    const resolution = EXPORT_RESOLUTIONS.find(r => r.value === exportResolution);
    if (isHorizontal) {
      return { width: resolution.height, height: resolution.width };
    }
    return { width: resolution.width, height: resolution.height };
  }, [exportResolution, isHorizontal]);

  const handleSampleUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      setSampleImage(file);
      const url = URL.createObjectURL(file);
      setImageUrl(url);
      
      const img = new Image();
      img.onload = () => {
        const horizontal = img.width > img.height;
        setIsHorizontal(horizontal);
        setImageDimensions({ width: img.width, height: img.height });
        setTextBox(prev => ({
          ...prev,
          x: Math.max(20, (img.width - prev.width) / 2),
          y: Math.max(20, (img.height - prev.height) / 2)
        }));
      };
      img.src = url;
      
      toast.success('Sample image uploaded successfully');
    } else {
      toast.error('Please select a valid image file');
    }
  }, []);

  const handleTargetUpload = useCallback((e) => {
    const files = Array.from(e.target.files || []);
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    if (imageFiles.length > 0) {
      setTargetImages(imageFiles);
      toast.success(`${imageFiles.length} target images uploaded`);
    } else {
      toast.error('Please select valid image files');
    }
  }, []);

  const handleTextFileUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (file && file.type === 'text/plain') {
      setTextFile(file);
      file.text().then(content => {
        const lines = content.split('\n').filter(line => line.trim() !== '');
        setTextLines(lines);
        toast.success(`Text file uploaded with ${lines.length} lines`);
      });
    } else {
      toast.error('Please select a valid text file');
    }
  }, []);

  const resetAll = useCallback(() => {
    setSampleImage(null);
    setTargetImages([]);
    setTextFile(null);
    setTextLines([]);
    setImageUrl('');
    setImageDimensions({ width: 800, height: 600 });
    setProcessedImages([]);
    setIsHorizontal(false);
    setIsDragging(false);
    setIsResizing(false);
    setDragStart({ x: 0, y: 0 });
    setResizeHandle(null);
    
    setTextBox({
      x: 100,
      y: 100,
      width: 300,
      height: 100,
      text: 'שלום עולם Hello World',
      style: {
        fontSize: 36,
        color: '#000000',
        strokeColor: '#ffffff',
        strokeWidth: 2,
        align: 'center',
        fontFamily: 'Tahoma'
      }
    });
    
    if (sampleInputRef.current) sampleInputRef.current.value = '';
    if (targetInputRef.current) targetInputRef.current.value = '';
    if (textInputRef.current) textInputRef.current.value = '';
    
    toast.success('All data cleared successfully');
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 p-2 sm:p-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-4 sm:mb-8">
          <div className="flex justify-between items-start mb-4">
            <div className="flex-1">
              <h1 className="text-2xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-2 sm:mb-4">
                Bulk Text Overlay Processing Tool
              </h1>
              <p className="text-sm sm:text-lg text-gray-600">
                Add variable text to multiple images with batch processing and professional export
              </p>
            </div>
            <Button 
              onClick={resetAll} 
              variant="outline" 
              size="sm"
              className="ml-4 text-red-600 border-red-300 hover:bg-red-50 hover:border-red-400"
            >
              🔄 Reset All
            </Button>
          </div>
        </div>

        <Tabs defaultValue="design" className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-4">
            <TabsTrigger value="design" className="text-xs sm:text-sm">Design</TabsTrigger>
            <TabsTrigger value="batch" className="text-xs sm:text-sm">Batch Setup</TabsTrigger>
            <TabsTrigger value="process" className="text-xs sm:text-sm">Process & Export</TabsTrigger>
          </TabsList>

          <TabsContent value="design" className="space-y-4 sm:space-y-6">
            <div className="grid lg:grid-cols-2 gap-4 sm:gap-6">
              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Sample Image & Text Design</CardTitle>
                  <CardDescription className="text-sm">
                    Upload a sample image and design your text overlay.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 sm:p-6 text-center">
                      <input
                        ref={sampleInputRef}
                        type="file"
                        accept="image/*"
                        onChange={handleSampleUpload}
                        className="hidden"
                      />
                      <Button onClick={() => sampleInputRef.current?.click()} variant="outline" className="w-full text-xs sm:text-sm">
                        <Upload className="h-3 w-3 sm:h-4 sm:w-4 mr-2" />
                        Upload Sample Image
                      </Button>
                      {sampleImage && <p className="mt-2 text-xs sm:text-sm text-green-600">✓ {sampleImage.name}</p>}
                    </div>

                    <div className="relative border rounded-lg overflow-hidden bg-gray-100 select-none touch-none" style={{ aspectRatio: isHorizontal ? '4/3' : '3/4', minHeight: '300px' }}>
                      {imageUrl ? (
                        <img src={imageUrl} alt="Preview" className="w-full h-full object-contain pointer-events-none" draggable={false} />
                      ) : (
                        <div className="w-full h-full flex flex-col items-center justify-center text-gray-400 space-y-2 sm:space-y-4 p-4">
                          <ImageIcon className="h-12 w-12 sm:h-16 sm:w-16" />
                          <div className="text-center">
                            <p className="text-sm sm:text-lg font-medium">Upload a sample image to start designing</p>
                            <p className="text-xs sm:text-sm">This will be used to position text for all target images</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-3 sm:pb-6">
                  <CardTitle className="text-lg sm:text-xl">Text Styling</CardTitle>
                  <CardDescription className="text-sm">Design your text appearance.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4 sm:space-y-6">
                  <div className="space-y-2">
                    <Label className="text-sm">Sample Text Content</Label>
                    <Textarea
                      value={textBox.text}
                      onChange={(e) => setTextBox(prev => ({ ...prev, text: e.target.value }))}
                      placeholder="Enter sample text... הכנס טקסט לדוגמה"
                      className="min-h-[60px] sm:min-h-[80px] resize-none text-sm"
                      dir="auto"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Font Family</Label>
                    <Select value={textBox.style.fontFamily} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontFamily: value } }))}>
                      <SelectTrigger><SelectValue /></SelectTrigger>
                      <SelectContent>
                        <div className="px-2 py-1 text-sm font-medium text-gray-500">Hebrew Fonts</div>
                        {HEBREW_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>{font.label}</SelectItem>
                        ))}
                        <div className="px-2 py-1 text-sm font-medium text-gray-500 border-t mt-2 pt-2">English Fonts</div>
                        {ENGLISH_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>{font.label}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label className="text-sm">Font Size: {textBox.style.fontSize}px</Label>
                      <Slider
                        value={[textBox.style.fontSize]}
                        onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontSize: value } }))}
                        min={12}
                        max={120}
                        step={1}
                        className="w-full"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label className="text-sm">Text Alignment</Label>
                      <Select value={textBox.style.align} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, align: value } }))}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>
                          <SelectItem value="left">Left</SelectItem>
                          <SelectItem value="center">Center</SelectItem>
                          <SelectItem value="right">Right</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label className="text-sm">Text Color</Label>
                      <div className="flex gap-2">
                        <Input
                          type="color"
                          value={textBox.style.color}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, color: e.target.value } }))}
                          className="w-12 h-8 p-1 border rounded"
                        />
                        <Input
                          type="text"
                          value={textBox.style.color}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, color: e.target.value } }))}
                          className="flex-1 text-xs"
                          placeholder="#000000"
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label className="text-sm">Stroke Color</Label>
                      <div className="flex gap-2">
                        <Input
                          type="color"
                          value={textBox.style.strokeColor}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeColor: e.target.value } }))}
                          className="w-12 h-8 p-1 border rounded"
                        />
                        <Input
                          type="text"
                          value={textBox.style.strokeColor}
                          onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeColor: e.target.value } }))}
                          className="flex-1 text-xs"
                          placeholder="#ffffff"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-sm">Stroke Width: {textBox.style.strokeWidth}px</Label>
                    <Slider
                      value={[textBox.style.strokeWidth]}
                      onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeWidth: value } }))}
                      min={0}
                      max={10}
                      step={0.5}
                      className="w-full"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="batch" className="space-y-4">
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Target Images</CardTitle>
                  <CardDescription>Upload multiple images for processing</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={targetInputRef}
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={handleTargetUpload}
                      className="hidden"
                    />
                    <Button onClick={() => targetInputRef.current?.click()} variant="outline" className="w-full">
                      <Upload className="h-4 w-4 mr-2" />
                      Upload Target Images
                    </Button>
                    {targetImages.length > 0 && (
                      <p className="mt-2 text-sm text-green-600">✓ {targetImages.length} images uploaded</p>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Text File</CardTitle>
                  <CardDescription>Upload text file with one line per image</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={textInputRef}
                      type="file"
                      accept=".txt"
                      onChange={handleTextFileUpload}
                      className="hidden"
                    />
                    <Button onClick={() => textInputRef.current?.click()} variant="outline" className="w-full">
                      <FileText className="h-4 w-4 mr-2" />
                      Upload Text File
                    </Button>
                    {textFile && (
                      <p className="mt-2 text-sm text-green-600">✓ {textFile.name} ({textLines.length} lines)</p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-4">
            <div className="grid lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Export Settings</CardTitle>
                  <CardDescription>Configure output format and quality</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Export Resolution</Label>
                    <Select value={exportResolution} onValueChange={setExportResolution}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {EXPORT_RESOLUTIONS.map((resolution) => (
                          <SelectItem key={resolution.value} value={resolution.value}>
                            {resolution.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Export Format</Label>
                    <Select value={exportFormat} onValueChange={setExportFormat}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {EXPORT_FORMATS.map((format) => (
                          <SelectItem key={format.value} value={format.value}>
                            {format.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Processing</CardTitle>
                  <CardDescription>Process images and download results</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Button 
                    disabled={isProcessing || targetImages.length === 0 || textLines.length === 0}
                    className="w-full"
                    size="lg"
                  >
                    {isProcessing ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Processing...
                      </>
                    ) : (
                      <>
                        <Settings className="h-4 w-4 mr-2" />
                        Process All Images
                      </>
                    )}
                  </Button>

                  {processedImages.length > 0 && (
                    <div className="space-y-3">
                      <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                        <p className="text-sm font-medium text-green-800">✅ Processing Complete!</p>
                        <p className="text-xs text-green-700">{processedImages.length} images processed</p>
                      </div>

                      <Button 
                        className="w-full"
                        variant="outline"
                        size="lg"
                      >
                        <Download className="h-4 w-4 mr-2" />
                        Download {exportFormat === 'pdf' ? 'PDF' : 'ZIP File'}
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

