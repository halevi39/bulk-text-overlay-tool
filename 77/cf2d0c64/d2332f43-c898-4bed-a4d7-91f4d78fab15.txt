$ cd /workspace/shadcn-ui && rm src/pages/Index.tsx
$ cd /workspace/shadcn-ui && cat >> src/pages/Index.tsx << 'EOF'
strokeWidth > 0 && (
                    <div className="space-y-2">
                      <Label htmlFor="stroke-color">Stroke Color</Label>
                      <Input
                        id="stroke-color"
                        type="color"
                        value={textBox.style.strokeColor}
                        onChange={(e) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, strokeColor: e.target.value }
                        }))}
                        className="w-full h-12"
                      />
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Export Settings & Processing</CardTitle>
                <CardDescription>
                  Configure export format and process your images
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center p-8 bg-gray-50 rounded-lg">
                  <FileText className="h-16 w-16 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium mb-2">Ready to Process</h3>
                  <p className="text-gray-600 mb-4">
                    Upload your sample image and target images to begin batch processing
                  </p>
                  <div className="space-y-2 text-sm text-gray-500">
                    <p>• Sample Image: {sampleImage ? '✓' : '✗'}</p>
                    <p>• Target Images: {targetImages.length > 0 ? `✓ ${targetImages.length}` : '✗'}</p>
                    <p>• Text File: {textFile ? `✓ ${textLines.length} lines` : '✗'}</p>
                  </div>
                  <Button 
                    className="mt-4" 
                    disabled={!sampleImage || targetImages.length === 0 || textLines.length === 0 || isProcessing}
                    onClick={handleBulkProcess}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    {isProcessing ? 'Processing...' : 'Process Images'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  15:19  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && rm src/pages/Index.tsx

$ cd /workspace/shadcn-ui && cat >> src/pages/Index.tsx << 'EOF'
                        <div className="px-2 py-1 text-sm font-medium text-gray-500 border-t mt-2 pt-2">English Fonts</div>
                        {ENGLISH_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>
                            <span style={{ fontFamily: font.value }}>{font.label}</span>
                          </SelectItem>
                        ))}
                        {customFonts.length > 0 && (
                          <>
                            <div className="px-2 py-1 text-sm font-medium text-gray-500 border-t mt-2 pt-2">Custom Fonts</div>
                            {customFonts.map((font) => (
                              <SelectItem key={font.name} value={font.name}>
                                <span style={{ fontFamily: font.name }}>{font.name}</span>
                              </SelectItem>
                            ))}
                          </>
                        )}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Font Size</Label>
                      <Slider
                        value={[textBox.style.fontSize]}
                        onValueChange={([value]) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, fontSize: value }
                        }))}
                        min={12}
                        max={120}
                        step={1}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-500">{textBox.style.fontSize}px</span>
                    </div>

                    <div className="space-y-2">
                      <Label>Text Alignment</Label>
                      <Select 
                        value={textBox.style.align} 
                        onValueChange={(value: 'left' | 'center' | 'right') => 
                          setTextBox(prev => ({ 
                            ...prev, 
                            style: { ...prev.style, align: value }
                          }))
                        }
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="left">Left / שמאל</SelectItem>
                          <SelectItem value="center">Center / מרכז</SelectItem>
                          <SelectItem value="right">Right / ימין</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="text-color">Text Color</Label>
                      <Input
                        id="text-color"
                        type="color"
                        value={textBox.style.color}
                        onChange={(e) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, color: e.target.value }
                        }))}
                        className="w-full h-12"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label>Stroke Width</Label>
                      <Slider
                        value={[textBox.style.strokeWidth]}
                        onValueChange={([value]) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, strokeWidth: value }
                        }))}
                        min={0}
                        max={10}
                        step={1}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-500">{textBox.style.strokeWidth}px</span>
                    </div>
                  </div>

                  {textBox.style.strokeWidth > 0 && (
                    <div className="space-y-2">
                      <Label htmlFor="stroke-color">Stroke Color</Label>
                      <Input
                        id="stroke-color"
                        type="color"
                        value={textBox.style.strokeColor}
                        onChange={(e) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, strokeColor: e.target.value }
                        }))}
                        className="w-full h-12"
                      />
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Export Settings & Processing</CardTitle>
                <CardDescription>
                  Configure export format and process your images
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center p-8 bg-gray-50 rounded-lg">
                  <FileText className="h-16 w-16 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium mb-2">Ready to Process</h3>
                  <p className="text-gray-600 mb-4">
                    Upload your sample image and target images to begin batch processing
                  </p>
                  <div className="space-y-2 text-sm text-gray-500">
                    <p>• Sample Image: {sampleImage ? '✓' : '✗'}</p>
                    <p>• Target Images: {targetImages.length > 0 ? `✓ ${targetImages.length}` : '✗'}</p>
                    <p>• Text File: {textFile ? `✓ ${textLines.length} lines` : '✗'}</p>
                  </div>
                  <div className="flex gap-4 justify-center mt-4">
                    <Button 
                      disabled={!sampleImage || targetImages.length === 0 || textLines.length === 0 || isProcessing}
                      onClick={handleBulkProcess}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      {isProcessing ? 'Processing...' : 'Process Images'}
                    </Button>
                    {processedImages.length > 0 && (
                      <Button 
                        variant="outline"
                        onClick={downloadAsZip}
                      >
                        <Archive className="h-4 w-4 mr-2" />
                        Download All ({processedImages.length})
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  17:22  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && rm src/pages/Index.tsx

$ cd /workspace/shadcn-ui && pnpm add jszip

Progress: resolved 1, reused 0, downloaded 0, added 0
Progress: resolved 1, reused 1, downloaded 0, added 0
Progress: resolved 49, reused 48, downloaded 0, added 0
Progress: resolved 214, reused 213, downloaded 1, added 0
Progress: resolved 475, reused 398, downloaded 5, added 0
 WARN  1 deprecated subdependencies found: rollup-plugin-terser@7.0.2
Packages: +12
++++++++++++
Progress: resolved 501, reused 415, downloaded 12, added 12, done

dependencies:
+ jszip 3.10.1

Done in 7.1s
$ cd /workspace/shadcn-ui && cat >> src/pages/Index.tsx << 'EOF'
                          <SelectItem key={font.value} value={font.value}>
                            <span style={{ fontFamily: font.value }}>{font.label}</span>
                          </SelectItem>
                        ))}
                        {customFonts.length > 0 && (
                          <>
                            <div className="px-2 py-1 text-sm font-medium text-gray-500 border-t mt-2 pt-2">Custom Fonts</div>
                            {customFonts.map((font) => (
                              <SelectItem key={font.name} value={font.name}>
                                <span style={{ fontFamily: font.name }}>{font.name}</span>
                              </SelectItem>
                            ))}
                          </>
                        )}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Font Size</Label>
                      <Slider
                        value={[textBox.style.fontSize]}
                        onValueChange={([value]) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, fontSize: value }
                        }))}
                        min={12}
                        max={120}
                        step={1}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-500">{textBox.style.fontSize}px</span>
                    </div>

                    <div className="space-y-2">
                      <Label>Text Alignment</Label>
                      <Select 
                        value={textBox.style.align} 
                        onValueChange={(value: 'left' | 'center' | 'right') => 
                          setTextBox(prev => ({ 
                            ...prev, 
                            style: { ...prev.style, align: value }
                          }))
                        }
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="left">Left / שמאל</SelectItem>
                          <SelectItem value="center">Center / מרכז</SelectItem>
                          <SelectItem value="right">Right / ימין</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="text-color">Text Color</Label>
                      <Input
                        id="text-color"
                        type="color"
                        value={textBox.style.color}
                        onChange={(e) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, color: e.target.value }
                        }))}
                        className="w-full h-12"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label>Stroke Width</Label>
                      <Slider
                        value={[textBox.style.strokeWidth]}
                        onValueChange={([value]) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, strokeWidth: value }
                        }))}
                        min={0}
                        max={10}
                        step={1}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-500">{textBox.style.strokeWidth}px</span>
                    </div>
                  </div>

                  {textBox.style.strokeWidth > 0 && (
                    <div className="space-y-2">
                      <Label htmlFor="stroke-color">Stroke Color</Label>
                      <Input
                        id="stroke-color"
                        type="color"
                        value={textBox.style.strokeColor}
                        onChange={(e) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, strokeColor: e.target.value }
                        }))}
                        className="w-full h-12"
                      />
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Export Settings & Processing</CardTitle>
                <CardDescription>
                  Configure export format and process your images
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center p-8 bg-gray-50 rounded-lg">
                  <FileText className="h-16 w-16 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium mb-2">Ready to Process</h3>
                  <p className="text-gray-600 mb-4">
                    Upload your sample image and target images to begin batch processing
                  </p>
                  <div className="space-y-2 text-sm text-gray-500">
                    <p>• Sample Image: {sampleImage ? '✓' : '✗'}</p>
                    <p>• Target Images: {targetImages.length > 0 ? `✓ ${targetImages.length}` : '✗'}</p>
                    <p>• Text File: {textFile ? `✓ ${textLines.length} lines` : '✗'}</p>
                  </div>
                  <div className="flex gap-4 justify-center mt-4">
                    <Button 
                      disabled={!sampleImage || targetImages.length === 0 || textLines.length === 0 || isProcessing}
                      onClick={handleBulkProcess}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      {isProcessing ? 'Processing...' : 'Process Images'}
                    </Button>
                    {processedImages.length > 0 && (
                      <Button 
                        variant="outline"
                        onClick={downloadAsZip}
                      >
                        <Archive className="h-4 w-4 mr-2" />
                        Download All ({processedImages.length})
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  4:24  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && rm -f src/pages/Index.tsx

$ cd /workspace/shadcn-ui && pnpm add jszip

Progress: resolved 0, reused 1, downloaded 0, added 0
Progress: resolved 68, reused 68, downloaded 0, added 0
Progress: resolved 442, reused 409, downloaded 0, added 0
 WARN  1 deprecated subdependencies found: rollup-plugin-terser@7.0.2
Already up to date
Progress: resolved 501, reused 427, downloaded 0, added 0, done

Done in 5s
$ cd /workspace/shadcn-ui && cat >> src/pages/Index.tsx << 'EOF'
                          </SelectItem>
                        ))}
                        {customFonts.length > 0 && (
                          <>
                            <div className="px-2 py-1 text-sm font-medium text-gray-500 border-t mt-2 pt-2">Custom Fonts</div>
                            {customFonts.map((font) => (
                              <SelectItem key={font.name} value={font.name}>
                                <span style={{ fontFamily: font.name }}>{font.name}</span>
                              </SelectItem>
                            ))}
                          </>
                        )}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Font Size</Label>
                      <Slider
                        value={[textBox.style.fontSize]}
                        onValueChange={([value]) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, fontSize: value }
                        }))}
                        min={12}
                        max={120}
                        step={1}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-500">{textBox.style.fontSize}px</span>
                    </div>

                    <div className="space-y-2">
                      <Label>Text Alignment</Label>
                      <Select 
                        value={textBox.style.align} 
                        onValueChange={(value) => 
                          setTextBox(prev => ({ 
                            ...prev, 
                            style: { ...prev.style, align: value }
                          }))
                        }
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="left">Left / שמאל</SelectItem>
                          <SelectItem value="center">Center / מרכז</SelectItem>
                          <SelectItem value="right">Right / ימין</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="text-color">Text Color</Label>
                      <Input
                        id="text-color"
                        type="color"
                        value={textBox.style.color}
                        onChange={(e) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, color: e.target.value }
                        }))}
                        className="w-full h-12"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label>Stroke Width</Label>
                      <Slider
                        value={[textBox.style.strokeWidth]}
                        onValueChange={([value]) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, strokeWidth: value }
                        }))}
                        min={0}
                        max={10}
                        step={1}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-500">{textBox.style.strokeWidth}px</span>
                    </div>
                  </div>

                  {textBox.style.strokeWidth > 0 && (
                    <div className="space-y-2">
                      <Label htmlFor="stroke-color">Stroke Color</Label>
                      <Input
                        id="stroke-color"
                        type="color"
                        value={textBox.style.strokeColor}
                        onChange={(e) => setTextBox(prev => ({ 
                          ...prev, 
                          style: { ...prev.style, strokeColor: e.target.value }
                        }))}
                        className="w-full h-12"
                      />
                    </div>
                  )}

                  <div className="pt-4 border-t">
                    <Button 
                      onClick={downloadSingleImage}
                      disabled={!sampleImage}
                      className="w-full"
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download Single Image
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Export Settings & Processing</CardTitle>
                <CardDescription>
                  Configure export format and process your images
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center p-8 bg-gray-50 rounded-lg">
                  <FileText className="h-16 w-16 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium mb-2">Ready to Process</h3>
                  <p className="text-gray-600 mb-4">
                    Upload your sample image and target images to begin batch processing
                  </p>
                  <div className="space-y-2 text-sm text-gray-500">
                    <p>• Sample Image: {sampleImage ? '✓' : '✗'}</p>
                    <p>• Target Images: {targetImages.length > 0 ? `✓ ${targetImages.length}` : '✗'}</p>
                    <p>• Text File: {textFile ? `✓ ${textLines.length} lines` : '✗'}</p>
                  </div>
                  <div className="flex gap-4 justify-center mt-4">
                    <Button 
                      disabled={!sampleImage || targetImages.length === 0 || textLines.length === 0 || isProcessing}
                      onClick={handleBulkProcess}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      {isProcessing ? 'Processing...' : 'Process Images'}
                    </Button>
                    {processedImages.length > 0 && (
                      <Button 
                        variant="outline"
                        onClick={downloadAsZip}
                      >
                        <Archive className="h-4 w-4 mr-2" />
                        Download All ({processedImages.length})
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/pages/Index.tsx
  1:26  error  Parsing error: Declaration or statement expected

✖ 1 problem (1 error, 0 warnings)

 ELIFECYCLE  Command failed with exit code 1.
$ rm -f /workspace/shadcn-ui/src/pages/Index.tsx

$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src

$ rm -f /workspace/shadcn-ui/src/pages/Index.tsx

$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src

$ cd /workspace/shadcn-ui && head -20 src/pages/Index.tsx

$ cd /workspace/shadcn-ui && tail -20 src/pages/Index.tsx

$ cd /workspace/shadcn-ui && pnpm add jszip

Progress: resolved 0, reused 1, downloaded 0, added 0
Progress: resolved 106, reused 106, downloaded 0, added 0
 WARN  1 deprecated subdependencies found: rollup-plugin-terser@7.0.2
Progress: resolved 501, reused 427, downloaded 0, added 0
Already up to date
Progress: resolved 501, reused 427, downloaded 0, added 0, done

Done in 5.3s
$ cd /workspace/shadcn-ui && cat > src/pages/Index.tsx << 'EOF'
import React, { useState, useRef, useCallback, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Textarea } from '@/components/ui/textarea';
import { Upload, Download, FileText, Image as ImageIcon } from 'lucide-react';
import { toast } from 'sonner';
import JSZip from 'jszip';

const HEBREW_FONTS = [
  { value: 'David', label: 'דוד (David)' },
  { value: 'Narkisim', label: 'נרקיסים (Narkisim)' },
  { value: 'Rod', label: 'רוד (Rod)' },
  { value: 'Miriam', label: 'מרים (Miriam)' },
  { value: 'Gisha', label: 'גישה (Gisha)' },
  { value: 'Tahoma', label: 'Tahoma' },
];

const ENGLISH_FONTS = [
  { value: 'Arial', label: 'Arial' },
  { value: 'Times New Roman', label: 'Times New Roman' },
  { value: 'Calibri', label: 'Calibri' },
  { value: 'Georgia', label: 'Georgia' },
  { value: 'Helvetica', label: 'Helvetica' },
];

export default function Index() {
  const [sampleImage, setSampleImage] = useState(null);
  const [targetImages, setTargetImages] = useState([]);
  const [textFile, setTextFile] = useState(null);
  const [textLines, setTextLines] = useState([]);
  const [imageUrl, setImageUrl] = useState('');
  const [imageDimensions, setImageDimensions] = useState({ width: 800, height: 600 });
  const [isProcessing, setIsProcessing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [resizeHandle, setResizeHandle] = useState(null);
  const [processedImages, setProcessedImages] = useState([]);

  const [textBox, setTextBox] = useState({
    x: 100,
    y: 100,
    width: 300,
    height: 100,
    text: 'שלום עולם Hello World',
    style: {
      fontSize: 36,
      color: '#000000',
      strokeColor: '#ffffff',
      strokeWidth: 2,
      align: 'center',
      fontFamily: 'Tahoma'
    }
  });

  const containerRef = useRef(null);
  const sampleInputRef = useRef(null);
  const targetInputRef = useRef(null);
  const textInputRef = useRef(null);

  const detectLanguage = useCallback((text) => {
    const hebrewRegex = /[\u0590-\u05FF]/;
    return hebrewRegex.test(text) ? 'rtl' : 'ltr';
  }, []);

  const handleSampleUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      setSampleImage(file);
      const url = URL.createObjectURL(file);
      setImageUrl(url);
      
      const img = new Image();
      img.onload = () => {
        setImageDimensions({ width: img.width, height: img.height });
        setTextBox(prev => ({
          ...prev,
          x: Math.max(20, (img.width - prev.width) / 2),
          y: Math.max(20, (img.height - prev.height) / 2)
        }));
      };
      img.src = url;
      
      toast.success('Sample image uploaded successfully');
    } else {
      toast.error('Please select a valid image file');
    }
  }, []);

  const handleTargetUpload = useCallback((e) => {
    const files = Array.from(e.target.files || []);
    const imageFiles = files.filter(file => file.type.startsWith('image/'));
    if (imageFiles.length > 0) {
      setTargetImages(imageFiles);
      toast.success(`${imageFiles.length} target images uploaded`);
    } else {
      toast.error('Please select valid image files');
    }
  }, []);

  const handleTextFileUpload = useCallback((e) => {
    const file = e.target.files?.[0];
    if (file && file.type === 'text/plain') {
      setTextFile(file);
      file.text().then(content => {
        const lines = content.split('\n').filter(line => line.trim() !== '');
        setTextLines(lines);
        toast.success(`Text file uploaded with ${lines.length} lines`);
      });
    } else {
      toast.error('Please select a valid text file');
    }
  }, []);

  const handleTextChange = useCallback((newText) => {
    setTextBox(prev => ({
      ...prev,
      text: newText
    }));
  }, []);

  const handleMouseDown = useCallback((e, action, handle) => {
    e.preventDefault();
    e.stopPropagation();
    const rect = containerRef.current?.getBoundingClientRect();
    if (!rect) return;

    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    if (action === 'drag') {
      setIsDragging(true);
      setDragStart({ x: x - (textBox.x * rect.width / imageDimensions.width), y: y - (textBox.y * rect.height / imageDimensions.height) });
    } else if (action === 'resize' && handle) {
      setIsResizing(true);
      setResizeHandle(handle);
      setDragStart({ x, y });
    }
  }, [textBox.x, textBox.y, imageDimensions]);

  const handleMouseMove = useCallback((e) => {
    if (!containerRef.current) return;
    
    const rect = containerRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    if (isDragging) {
      const newX = Math.max(0, Math.min((x - dragStart.x) * imageDimensions.width / rect.width, imageDimensions.width - textBox.width));
      const newY = Math.max(0, Math.min((y - dragStart.y) * imageDimensions.height / rect.height, imageDimensions.height - textBox.height));
      
      setTextBox(prev => ({ ...prev, x: newX, y: newY }));
    } else if (isResizing && resizeHandle) {
      const deltaX = (x - dragStart.x) * imageDimensions.width / rect.width;
      const deltaY = (y - dragStart.y) * imageDimensions.height / rect.height;

      setTextBox(prev => {
        let newWidth = prev.width;
        let newHeight = prev.height;
        let newX = prev.x;
        let newY = prev.y;

        switch (resizeHandle) {
          case 'se':
            newWidth = Math.max(50, prev.width + deltaX);
            newHeight = Math.max(30, prev.height + deltaY);
            break;
          case 'sw':
            newWidth = Math.max(50, prev.width - deltaX);
            newHeight = Math.max(30, prev.height + deltaY);
            newX = Math.max(0, prev.x + deltaX);
            break;
          case 'ne':
            newWidth = Math.max(50, prev.width + deltaX);
            newHeight = Math.max(30, prev.height - deltaY);
            newY = Math.max(0, prev.y + deltaY);
            break;
          case 'nw':
            newWidth = Math.max(50, prev.width - deltaX);
            newHeight = Math.max(30, prev.height - deltaY);
            newX = Math.max(0, prev.x + deltaX);
            newY = Math.max(0, prev.y + deltaY);
            break;
        }

        return { ...prev, x: newX, y: newY, width: newWidth, height: newHeight };
      });

      setDragStart({ x, y });
    }
  }, [isDragging, isResizing, resizeHandle, dragStart, imageDimensions, textBox.width, textBox.height]);

  const handleMouseUp = useCallback(() => {
    setIsDragging(false);
    setIsResizing(false);
    setResizeHandle(null);
  }, []);

  useEffect(() => {
    const handleGlobalMouseMove = (e) => {
      if (isDragging || isResizing) {
        handleMouseMove(e);
      }
    };

    const handleGlobalMouseUp = () => {
      handleMouseUp();
    };

    if (isDragging || isResizing) {
      document.addEventListener('mousemove', handleGlobalMouseMove);
      document.addEventListener('mouseup', handleGlobalMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleGlobalMouseMove);
      document.removeEventListener('mouseup', handleGlobalMouseUp);
    };
  }, [isDragging, isResizing, handleMouseMove, handleMouseUp]);

  const createImageWithText = useCallback(async (imageFile, text) => {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      canvas.width = 1488;
      canvas.height = 2126;
      
      const img = new Image();
      img.onload = () => {
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        
        const scaleX = canvas.width / imageDimensions.width;
        const scaleY = canvas.height / imageDimensions.height;
        
        const textX = textBox.x * scaleX;
        const textY = textBox.y * scaleY;
        const textWidth = textBox.width * scaleX;
        const textHeight = textBox.height * scaleY;
        const fontSize = textBox.style.fontSize * Math.min(scaleX, scaleY);
        
        ctx.font = `${fontSize}px "${textBox.style.fontFamily}", Arial, sans-serif`;
        ctx.fillStyle = textBox.style.color;
        ctx.textAlign = textBox.style.align;
        ctx.textBaseline = 'middle';
        ctx.direction = detectLanguage(text) === 'rtl' ? 'rtl' : 'ltr';
        
        if (textBox.style.strokeWidth > 0) {
          ctx.strokeStyle = textBox.style.strokeColor;
          ctx.lineWidth = textBox.style.strokeWidth * Math.min(scaleX, scaleY);
        }
        
        let alignX = textX;
        if (textBox.style.align === 'center') {
          alignX = textX + textWidth / 2;
        } else if (textBox.style.align === 'right') {
          alignX = textX + textWidth;
        }
        
        const alignY = textY + textHeight / 2;
        
        if (textBox.style.strokeWidth > 0) {
          ctx.strokeText(text, alignX, alignY);
        }
        ctx.fillText(text, alignX, alignY);
        
        canvas.toBlob((blob) => {
          resolve(blob);
        }, 'image/png');
      };
      
      img.src = URL.createObjectURL(imageFile);
    });
  }, [imageDimensions, textBox, detectLanguage]);

  const handleBulkProcess = async () => {
    if (targetImages.length === 0 || textLines.length === 0) {
      toast.error('Please upload target images and text file');
      return;
    }

    setIsProcessing(true);
    const processed = [];

    try {
      const maxItems = Math.min(targetImages.length, textLines.length);
      
      for (let i = 0; i < maxItems; i++) {
        const imageBlob = await createImageWithText(targetImages[i], textLines[i]);
        processed.push(imageBlob);
        toast.success(`Processed ${i + 1}/${maxItems} images`);
      }
      
      setProcessedImages(processed);
      toast.success(`Successfully processed ${processed.length} images`);
      
    } catch (error) {
      console.error('Processing error:', error);
      toast.error('Error processing images');
    } finally {
      setIsProcessing(false);
    }
  };

  const downloadAsZip = async () => {
    if (processedImages.length === 0) {
      toast.error('No processed images to download');
      return;
    }

    try {
      const zip = new JSZip();
      
      processedImages.forEach((blob, index) => {
        zip.file(`processed_image_${String(index + 1).padStart(3, '0')}.png`, blob);
      });
      
      const zipBlob = await zip.generateAsync({ type: 'blob' });
      const url = URL.createObjectURL(zipBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'processed_images.zip';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast.success(`Downloaded ${processedImages.length} images as ZIP file`);
    } catch (error) {
      console.error('ZIP creation error:', error);
      toast.error('Error creating ZIP file');
    }
  };

  const getTextStyle = () => {
    const { fontSize, color, strokeColor, strokeWidth, fontFamily, align } = textBox.style;
    const direction = detectLanguage(textBox.text);
    
    return {
      fontSize: `${fontSize}px`,
      color,
      fontFamily: `"${fontFamily}", Arial, sans-serif`,
      textAlign: align,
      direction,
      WebkitTextStroke: strokeWidth > 0 ? `${strokeWidth}px ${strokeColor}` : 'none',
      lineHeight: '1.2',
      wordWrap: 'break-word',
      overflow: 'hidden',
      cursor: isDragging ? 'grabbing' : 'grab',
      userSelect: 'none',
      whiteSpace: 'pre-wrap',
      textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'
    };
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 p-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-4">
            Bulk Text Overlay Processing Tool
          </h1>
          <p className="text-lg text-gray-600">
            Add variable text to multiple images with batch processing and professional export
          </p>
        </div>

        <Tabs defaultValue="design" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="design">Design</TabsTrigger>
            <TabsTrigger value="batch">Batch Setup</TabsTrigger>
            <TabsTrigger value="process">Process & Export</TabsTrigger>
          </TabsList>

          <TabsContent value="design" className="space-y-6">
            <div className="grid lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Sample Image & Text Design</CardTitle>
                  <CardDescription>
                    Upload a sample image and design your text overlay. This position and styling will be applied to all target images.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                      <input
                        ref={sampleInputRef}
                        type="file"
                        accept="image/*"
                        onChange={handleSampleUpload}
                        className="hidden"
                      />
                      <Button onClick={() => sampleInputRef.current?.click()} variant="outline" className="w-full">
                        <Upload className="h-4 w-4 mr-2" />
                        Upload Sample Image
                      </Button>
                      {sampleImage && <p className="mt-2 text-sm text-green-600">✓ {sampleImage.name}</p>}
                    </div>

                    <div 
                      ref={containerRef}
                      className="relative border rounded-lg overflow-hidden bg-gray-100 select-none"
                      style={{ aspectRatio: '4/3', minHeight: '400px' }}
                      onMouseMove={handleMouseMove}
                      onMouseUp={handleMouseUp}
                    >
                      {imageUrl ? (
                        <>
                          <img src={imageUrl} alt="Preview" className="w-full h-full object-contain pointer-events-none" draggable={false} />
                          
                          <div
                            className={`absolute border-2 ${isDragging || isResizing ? 'border-blue-600 bg-blue-600/20' : 'border-blue-500 bg-blue-500/10'} transition-colors`}
                            style={{
                              left: `${(textBox.x / imageDimensions.width) * 100}%`,
                              top: `${(textBox.y / imageDimensions.height) * 100}%`,
                              width: `${(textBox.width / imageDimensions.width) * 100}%`,
                              height: `${(textBox.height / imageDimensions.height) * 100}%`,
                              cursor: isDragging ? 'grabbing' : 'grab'
                            }}
                            onMouseDown={(e) => handleMouseDown(e, 'drag')}
                          >
                            <div className="w-full h-full flex items-center justify-center p-2" style={getTextStyle()}>
                              {textBox.text}
                            </div>

                            {!isDragging && !isResizing && (
                              <>
                                <div className="absolute -top-1 -left-1 w-3 h-3 bg-blue-500 border border-white rounded-full cursor-nw-resize hover:bg-blue-600" onMouseDown={(e) => handleMouseDown(e, 'resize', 'nw')} />
                                <div className="absolute -top-1 -right-1 w-3 h-3 bg-blue-500 border border-white rounded-full cursor-ne-resize hover:bg-blue-600" onMouseDown={(e) => handleMouseDown(e, 'resize', 'ne')} />
                                <div className="absolute -bottom-1 -left-1 w-3 h-3 bg-blue-500 border border-white rounded-full cursor-sw-resize hover:bg-blue-600" onMouseDown={(e) => handleMouseDown(e, 'resize', 'sw')} />
                                <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-blue-500 border border-white rounded-full cursor-se-resize hover:bg-blue-600" onMouseDown={(e) => handleMouseDown(e, 'resize', 'se')} />
                              </>
                            )}
                          </div>
                        </>
                      ) : (
                        <div className="w-full h-full flex flex-col items-center justify-center text-gray-400 space-y-4">
                          <ImageIcon className="h-16 w-16" />
                          <div className="text-center">
                            <p className="text-lg font-medium">Upload a sample image to start designing</p>
                            <p className="text-sm">This will be used to position text for all target images</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Text Styling</CardTitle>
                  <CardDescription>Design your text appearance. These settings will be applied to all target images.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-2">
                    <Label>Sample Text Content</Label>
                    <Textarea
                      value={textBox.text}
                      onChange={(e) => handleTextChange(e.target.value)}
                      placeholder="Enter sample text... הכנס טקסט לדוגמה"
                      className="min-h-[80px] resize-none"
                      dir="auto"
                    />
                    <div className="text-xs text-gray-500">This is just for design preview. Actual text will come from your text file.</div>
                  </div>

                  <div className="space-y-2">
                    <Label>Font Family</Label>
                    <Select value={textBox.style.fontFamily} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontFamily: value } }))}>
                      <SelectTrigger><SelectValue /></SelectTrigger>
                      <SelectContent>
                        <div className="px-2 py-1 text-sm font-medium text-gray-500">Hebrew Fonts</div>
                        {HEBREW_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>
                            <span style={{ fontFamily: font.value }}>{font.label}</span>
                          </SelectItem>
                        ))}
                        <div className="px-2 py-1 text-sm font-medium text-gray-500 border-t mt-2 pt-2">English Fonts</div>
                        {ENGLISH_FONTS.map((font) => (
                          <SelectItem key={font.value} value={font.value}>
                            <span style={{ fontFamily: font.value }}>{font.label}</span>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Font Size</Label>
                      <Slider
                        value={[textBox.style.fontSize]}
                        onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontSize: value } }))}
                        min={12}
                        max={120}
                        step={1}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-500">{textBox.style.fontSize}px</span>
                    </div>

                    <div className="space-y-2">
                      <Label>Text Alignment</Label>
                      <Select value={textBox.style.align} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, align: value } }))}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>
                          <SelectItem value="left">Left / שמאל</SelectItem>
                          <SelectItem value="center">Center / מרכז</SelectItem>
                          <SelectItem value="right">Right / ימין</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Text Color</Label>
                      <Input
                        type="color"
                        value={textBox.style.color}
                        onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, color: e.target.value } }))}
                        className="w-full h-12"
                      />
                    </div>

                    <div className="space-y-2">
                      <Label>Stroke Width</Label>
                      <Slider
                        value={[textBox.style.strokeWidth]}
                        onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeWidth: value } }))}
                        min={0}
                        max={10}
                        step={1}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-500">{textBox.style.strokeWidth}px</span>
                    </div>
                  </div>

                  {textBox.style.strokeWidth > 0 && (
                    <div className="space-y-2">
                      <Label>Stroke Color</Label>
                      <Input
                        type="color"
                        value={textBox.style.strokeColor}
                        onChange={(e) => setTextBox(prev => ({ ...prev, style: { ...prev.style, strokeColor: e.target.value } }))}
                        className="w-full h-12"
                      />
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="batch" className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Target Images</CardTitle>
                  <CardDescription>Upload multiple images for batch processing</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={targetInputRef}
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={handleTargetUpload}
                      className="hidden"
                    />
                    <Button onClick={() => targetInputRef.current?.click()} variant="outline" className="w-full">
                      <Upload className="h-4 w-4 mr-2" />
                      Choose Target Images
                    </Button>
                    {targetImages.length > 0 && <p className="mt-2 text-sm text-green-600">✓ {targetImages.length} images selected</p>}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Text File for Batch Processing</CardTitle>
                  <CardDescription>Upload a text file with one line per image</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <input
                      ref={textInputRef}
                      type="file"
                      accept=".txt"
                      onChange={handleTextFileUpload}
                      className="hidden"
                    />
                    <Button onClick={() => textInputRef.current?.click()} variant="outline" className="w-full">
                      <Upload className="h-4 w-4 mr-2" />
                      Choose Text File
                    </Button>
                    {textFile && <div className="mt-2 text-sm text-green-600">✓ {textFile.name} ({textLines.length} lines)</div>}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="process" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Batch Processing & Export</CardTitle>
                <CardDescription>Process all images and download as ZIP</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center p-8 bg-gray-50 rounded-lg">
                  <FileText className="h-16 w-16 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium mb-2">Ready to Process</h3>
                  <p className="text-gray-600 mb-4">Upload your target images and text file to begin batch processing</p>
                  <div className="space-y-2 text-sm text-gray-500">
                    <p>• Sample Image: {sampleImage ? '✓' : '✗'}</p>
                    <p>• Target Images: {targetImages.length > 0 ? `✓ ${targetImages.length}` : '✗'}</p>
                    <p>• Text File: {textFile ? `✓ ${textLines.length} lines` : '✗'}</p>
                  </div>
                  <div className="flex gap-4 justify-center mt-4">
                    <Button 
                      disabled={!sampleImage || targetImages.length === 0 || textLines.length === 0 || isProcessing}
                      onClick={handleBulkProcess}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      {isProcessing ? 'Processing...' : 'Start Bulk Processing'}
                    </Button>
                    
                    {processedImages.length > 0 && (
                      <Button onClick={downloadAsZip} variant="outline">
                        <Download className="h-4 w-4 mr-2" />
                        Download ZIP ({processedImages.length} images)
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
EOF

$ cd /workspace/shadcn-ui && pnpm run lint


> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src

