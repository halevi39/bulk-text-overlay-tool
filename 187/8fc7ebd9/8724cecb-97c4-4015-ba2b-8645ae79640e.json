{"tasks": [{"task_id": "1", "dependent_task_ids": [], "instruction": "Update the Hebrew font selection in the bulk text overlay tool to use system fonts and fix font application.\n\n**SPECIFIC CHANGES REQUIRED:**\n\n**1. Update Hebrew Font Constants:**\nIn `/workspace/shadcn-ui/src/pages/Index.tsx`, replace the HEBREW_FONTS array with these system fonts:\n```javascript\nconst HEBREW_FONTS = [\n  { value: 'David', label: 'David (\u05d3\u05d5\u05d3)' },\n  { value: 'Narkisim', label: 'Narkisim (\u05e0\u05e8\u05e7\u05d9\u05e1\u05d9\u05dd)' },\n  { value: 'Rod', label: 'Rod (\u05e8\u05d5\u05d3)' },\n  { value: 'Miriam', label: 'Miriam (\u05de\u05e8\u05d9\u05dd)' },\n  { value: 'Gisha', label: 'Gisha (\u05d2\u05d9\u05e9\u05d4)' },\n  { value: 'Tahoma', label: 'Tahoma (\u05ea\u05d4\u05d5\u05de\u05d0)' }\n];\n```\n\n**2. Fix Font Application in getTextStyle():**\nUpdate the getTextStyle() function to properly apply system fonts with fallbacks:\n```javascript\nconst getTextStyle = () => {\n  const { fontSize, color, strokeColor, strokeWidth, fontFamily, align } = textBox.style;\n  const direction = detectLanguage(textBox.text);\n  \n  const containerRect = containerRef.current?.getBoundingClientRect();\n  const previewScale = containerRect ? containerRect.width / imageDimensions.width : 1;\n  const previewFontSize = fontSize * previewScale;\n  \n  // System font fallbacks for Hebrew fonts\n  const getFontFamily = (font) => {\n    const hebrewFonts = ['David', 'Narkisim', 'Rod', 'Miriam', 'Gisha', 'Tahoma'];\n    if (hebrewFonts.includes(font)) {\n      return `\"${font}\", \"Arial Hebrew\", \"Times New Roman\", Arial, sans-serif`;\n    }\n    return `\"${font}\", Arial, sans-serif`;\n  };\n  \n  return {\n    fontSize: `${previewFontSize}px`,\n    color,\n    fontFamily: getFontFamily(fontFamily),\n    textAlign: align,\n    direction,\n    lineHeight: '1.2',\n    wordWrap: 'break-word',\n    overflow: 'hidden',\n    cursor: isDragging ? 'grabbing' : 'grab',\n    userSelect: 'none',\n    whiteSpace: 'pre-wrap',\n    WebkitTextStroke: strokeWidth > 0 ? `${strokeWidth * previewScale}px ${strokeColor}` : 'none',\n    textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'\n  };\n};\n```\n\n**3. Update Canvas Font Application:**\nAlso update the canvas font application in the processImages function to use the same font fallback logic:\n```javascript\n// In the canvas drawing section, update font application:\nconst getFontFamily = (font) => {\n  const hebrewFonts = ['David', 'Narkisim', 'Rod', 'Miriam', 'Gisha', 'Tahoma'];\n  if (hebrewFonts.includes(font)) {\n    return `${font}, \"Arial Hebrew\", \"Times New Roman\", Arial, sans-serif`;\n  }\n  return `${font}, Arial, sans-serif`;\n};\n\nctx.font = `${fontSize}px ${getFontFamily(fontFamily)}`;\n```\n\n**4. Remove Google Fonts Import:**\nSince we're using system fonts, remove or comment out the Google Fonts import from the HTML head if it exists.\n\n**5. Set Default Font:**\nUpdate the initial textBox state to use 'David' as the default Hebrew font:\n```javascript\nconst [textBox, setTextBox] = useState({\n  // ... other properties\n  style: {\n    fontSize: 48,\n    color: '#000000',\n    strokeColor: '#ffffff',\n    strokeWidth: 0,\n    fontFamily: 'David', // Changed from previous font\n    align: 'center'\n  }\n});\n```\n\n**TESTING REQUIREMENTS:**\n- Verify all 6 Hebrew system fonts (David, Narkisim, Rod, Miriam, Gisha, Tahoma) appear in the dropdown\n- Ensure font changes are immediately visible in the preview\n- Test that Hebrew text displays correctly with each font\n- Confirm font styling persists during drag/resize operations\n- Verify canvas export uses the correct fonts\n\n**SUCCESS CRITERIA:**\n- Hebrew font dropdown shows: David, Narkisim, Rod, Miriam, Gisha, Tahoma\n- Font selection immediately updates the text preview\n- System fonts render properly on Windows/Mac/Linux systems\n- Font fallbacks work correctly if system fonts are unavailable", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": true, "assignee": "Alex", "start_at": 1756408095.9162846, "end_at": 1756408462.043901}, {"task_id": "2", "dependent_task_ids": [], "instruction": "Add ZIP export functionality to the bulk text overlay tool to allow users to download all processed images in a single ZIP file.\n\n**SPECIFIC IMPLEMENTATION REQUIRED:**\n\n**1. Install JSZip Library:**\nAdd JSZip dependency to handle ZIP file creation in the browser.\n\n**2. Add ZIP Export Button:**\nIn `/workspace/shadcn-ui/src/pages/Index.tsx`, add a \"Download All as ZIP\" button in the Process & Export tab alongside the individual download buttons.\n\n**3. Implement ZIP Export Function:**\nCreate a new function `downloadAllAsZip` that:\n- Creates a new JSZip instance\n- Iterates through all processedImages\n- Converts each canvas to blob\n- Adds each image to the ZIP with proper filename (e.g., \"image_001.png\", \"image_002.jpg\")\n- Generates the ZIP file\n- Triggers download with filename like \"text_overlay_images.zip\"\n\n**4. Code Implementation:**\n```javascript\n// Add JSZip import at the top\nimport JSZip from 'jszip';\n\n// Add the ZIP export function\nconst downloadAllAsZip = async () => {\n  if (processedImages.length === 0) {\n    alert('No processed images to download');\n    return;\n  }\n\n  const zip = new JSZip();\n  \n  for (let i = 0; i < processedImages.length; i++) {\n    const canvas = processedImages[i];\n    \n    // Convert canvas to blob\n    const blob = await new Promise(resolve => {\n      canvas.toBlob(resolve, `image/${exportFormat}`, exportFormat === 'jpg' ? 0.9 : 1);\n    });\n    \n    // Add to ZIP with proper filename\n    const filename = `image_${String(i + 1).padStart(3, '0')}.${exportFormat}`;\n    zip.file(filename, blob);\n  }\n  \n  // Generate ZIP and trigger download\n  const zipBlob = await zip.generateAsync({ type: 'blob' });\n  const url = URL.createObjectURL(zipBlob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `text_overlay_images_${exportResolution}dpi.zip`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n};\n```\n\n**5. Add ZIP Export Button to UI:**\nIn the Process & Export tab, add the ZIP download button:\n```jsx\n<div className=\"flex flex-col sm:flex-row gap-2\">\n  <Button \n    onClick={downloadAllAsZip}\n    className=\"flex-1\"\n    disabled={processedImages.length === 0}\n  >\n    <Download className=\"w-4 h-4 mr-2\" />\n    Download All as ZIP ({processedImages.length} images)\n  </Button>\n</div>\n```\n\n**6. Package.json Update:**\nAdd JSZip to dependencies:\n```json\n\"jszip\": \"^3.10.1\"\n```\n\n**REQUIREMENTS:**\n- ZIP file should contain all processed images with sequential naming\n- Respect the selected export format (PNG/JPG) and resolution (180/300 DPI)\n- Show loading state during ZIP generation for large batches\n- Include image count in the button text\n- Disable button when no processed images exist\n- Use descriptive ZIP filename with resolution info\n\n**SUCCESS CRITERIA:**\n- \"Download All as ZIP\" button appears in Process & Export tab\n- Button shows correct image count and is disabled when no images\n- ZIP file downloads with all processed images\n- Images in ZIP have proper sequential naming (image_001.png, image_002.jpg, etc.)\n- ZIP filename includes resolution information\n- Works with both PNG and JPG export formats", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex", "start_at": 1756408462.043904}], "current_task_id": "2"}
