{"tasks": [{"task_id": "1", "dependent_task_ids": [], "instruction": "Update the bulk text overlay tool to increase the maximum font size from 120px to 500px.\n\n**SPECIFIC CHANGE REQUIRED:**\nIn the `/workspace/shadcn-ui/src/pages/Index.tsx` file, find the font size slider component and update the `max` prop from 120 to 500.\n\n**LOCATION TO MODIFY:**\nLook for the Slider component in the Text Styling section that controls font size. It should be around line where you see:\n```jsx\n<Slider\n  value={[textBox.style.fontSize]}\n  onValueChange={([value]) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontSize: value } }))}\n  min={12}\n  max={120}  // Change this to 500\n  step={1}\n  className=\"w-full\"\n/>\n```\n\n**EXACT CHANGE:**\nChange `max={120}` to `max={500}`\n\nThis will allow users to create much larger text overlays up to 500px font size for professional signage and large format applications.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": true, "assignee": "Alex", "start_at": 1756406459.7704802, "end_at": 1756406930.022315}, {"task_id": "2", "dependent_task_ids": [], "instruction": "URGENT: Fix the font selection and application issues in the bulk text overlay tool. The Hebrew and English fonts are not being applied properly in the preview.\n\n**CRITICAL ISSUES TO FIX:**\n\n**1. Font Selection Not Working:**\n- Font family changes are not being applied to the text preview\n- Hebrew and English font selections have no visible effect\n- The `getTextStyle()` function may not be properly applying the fontFamily\n\n**2. Font Loading Issues:**\n- Hebrew and English fonts may not be properly loaded/imported\n- Need to ensure Google Fonts or system fonts are properly loaded\n- Font fallbacks may not be working correctly\n\n**SPECIFIC FIXES REQUIRED:**\n\n**1. Fix Font Application in Preview:**\nCheck the `getTextStyle()` function and ensure it properly applies the selected font family:\n```javascript\nconst getTextStyle = () => {\n  const { fontSize, color, strokeColor, strokeWidth, fontFamily, align } = textBox.style;\n  const direction = detectLanguage(textBox.text);\n  \n  const containerRect = containerRef.current?.getBoundingClientRect();\n  const previewScale = containerRect ? containerRect.width / imageDimensions.width : 1;\n  const previewFontSize = fontSize * previewScale;\n  \n  return {\n    fontSize: `${previewFontSize}px`,\n    color,\n    fontFamily: `\"${fontFamily}\", \"Arial\", sans-serif`, // Ensure this is correctly formatted\n    textAlign: align,\n    direction,\n    lineHeight: '1.2',\n    wordWrap: 'break-word',\n    overflow: 'hidden',\n    cursor: isDragging ? 'grabbing' : 'grab',\n    userSelect: 'none',\n    whiteSpace: 'pre-wrap',\n    WebkitTextStroke: strokeWidth > 0 ? `${strokeWidth * previewScale}px ${strokeColor}` : 'none',\n    textShadow: strokeWidth > 0 ? 'none' : '2px 2px 4px rgba(0,0,0,0.3)'\n  };\n};\n```\n\n**2. Add Font Loading:**\nAdd Google Fonts import to the HTML head or component to ensure Hebrew and English fonts are loaded:\n```html\n<link href=\"https://fonts.googleapis.com/css2?family=Alef:wght@400;700&family=Heebo:wght@100;300;400;500;700;900&family=Assistant:wght@200;300;400;500;600;700;800&family=Rubik:wght@300;400;500;600;700;800;900&family=Varela+Round&family=Secular+One&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Roboto:wght@100;300;400;500;700;900&family=Open+Sans:wght@300;400;500;600;700;800&family=Lato:wght@100;300;400;700;900&family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap\" rel=\"stylesheet\">\n```\n\n**3. Verify Font Constants:**\nEnsure the HEBREW_FONTS and ENGLISH_FONTS arrays have correct font family names that match the loaded fonts:\n```javascript\nconst HEBREW_FONTS = [\n  { value: 'Alef', label: 'Alef (\u05d0\u05dc\u05e3)' },\n  { value: 'Heebo', label: 'Heebo (\u05d4\u05d9\u05d1\u05d5)' },\n  { value: 'Assistant', label: 'Assistant (\u05d0\u05e1\u05d9\u05e1\u05d8\u05e0\u05d8)' },\n  { value: 'Rubik', label: 'Rubik (\u05e8\u05d5\u05d1\u05d9\u05e7)' },\n  { value: 'Varela Round', label: 'Varela Round' },\n  { value: 'Secular One', label: 'Secular One' }\n];\n\nconst ENGLISH_FONTS = [\n  { value: 'Inter', label: 'Inter' },\n  { value: 'Roboto', label: 'Roboto' },\n  { value: 'Open Sans', label: 'Open Sans' },\n  { value: 'Lato', label: 'Lato' },\n  { value: 'Poppins', label: 'Poppins' }\n];\n```\n\n**4. Fix Font Selection State:**\nEnsure the font selection properly updates the textBox state and triggers re-render:\n```jsx\n<Select value={textBox.style.fontFamily} onValueChange={(value) => setTextBox(prev => ({ ...prev, style: { ...prev.style, fontFamily: value } }))}>\n```\n\n**5. Add Font Loading Verification:**\nAdd a useEffect to verify fonts are loaded and apply fallbacks if needed.\n\n**TESTING REQUIREMENTS:**\n- Verify Hebrew fonts display correctly with Hebrew text\n- Verify English fonts display correctly with English text\n- Ensure font changes are immediately visible in the preview\n- Test all 11 fonts (6 Hebrew + 5 English) work properly\n- Confirm font styling persists during drag/resize operations\n\nFix these critical font issues to make the text styling fully functional.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex", "start_at": 1756406930.0223176}], "current_task_id": "2"}
